Caidan.java:
package chengxu;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class Caidan extends JFrame implements ActionListener{
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
    private JButton j1;
    private JButton j2;
    private JButton j3;
    private JButton j4;
    private JButton j5;
    private JButton j6;
    public Caidan(){
    	setLayout(new FlowLayout());
    	setTitle("学生管理程序");
    	setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    	this.setSize(800,400);
    	this.setLocation(400,400);
    	j1=new JButton("点名");
    	j1.setPreferredSize(new Dimension(100,100));
    	this.add(j1);
    	j2=new JButton("课堂");
    	j2.setPreferredSize(new Dimension(100,100));
    	this.add(j2);
    	j3=new JButton("作业");
    	j3.setPreferredSize(new Dimension(100,100));
    	this.add(j3);
    	j4=new JButton("测试");
    	j4.setPreferredSize(new Dimension(100,100));
    	this.add(j4);
    	j5=new JButton("考试");
    	j5.setPreferredSize(new Dimension(100,100));
    	this.add(j5);
    	j6=new JButton("管理");
    	j6.setPreferredSize(new Dimension(100,100));
    	this.add(j6);
    	j1.addActionListener(this);//加入事件监听
    	j2.addActionListener(this);//加入事件监听
    	j3.addActionListener(this);//加入事件监听
    	j4.addActionListener(this);//加入事件监听
    	j5.addActionListener(this);//加入事件监听
    	j6.addActionListener(this);//加入事件监听
    	this.setVisible(true);
    }
    @SuppressWarnings("unused")
	public static void main(String[] args) {
    	// TODO 自动生成的构造函数存根
    		Caidan frame=new Caidan();
    }
    public void actionPerformed(ActionEvent e) {
    	// TODO 自动生成的构造函数存根
    	if(e.getSource()==j1){
    		//this.dispose();//点击按钮时Caidan销毁,new一个Dianming
    		try {
				new Dianming();
			} catch (IOException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			}
        }
    	if(e.getSource()==j2){
    		//this.dispose();//点击按钮时Caidan销毁,new一个Ketang
    		try {
				new Ketang();
			} catch (IOException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			}
    	}
    	if(e.getSource()==j3)
    	{
    		//this.dispose();//点击按钮时Caidan销毁,new一个Zuoye
    		try {
				new Zuoye();
			} catch (IOException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			}
    	}
    	if(e.getSource()==j4){
    		//this.dispose();//点击按钮时Caidan销毁,new一个Ceshi
    		try {
				new Ceshi();
			} catch (IOException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			}}
    	if(e.getSource()==j5){
    		//this.dispose();//点击按钮时Caidan销毁,new一个Kaoshi
    		try {
				new Kaoshi();
			} catch (IOException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			}
    	}
    	if(e.getSource()==j6){
    		//this.dispose();//点击按钮时Caidan销毁,new一个Guanli
    		new Guanli();
    	}
    }

}
_________________________________________________________________________________________________________________________________________________________________________________
Dianming.java:
package chengxu;

import javax.swing.JButton;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.io.*;

public class Dianming extends JFrame {
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
	public static void main(String args[]) throws IOException {
		Dianming frame = new Dianming();
		frame.setVisible(true);
	}
 
	@SuppressWarnings({ "null", "unused", "resource" })
	public Dianming () throws IOException
	{
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
		Date date = new Date();//创建一个date对象保存当前时间
		String dateStr = simpleDateFormat.format(date);//format()方法将Date转换成指定格式的String
		/**
		 * 创建按钮和其他组件
		 */
		// 创建编号与编号输入框
		JLabel NumLable = new JLabel("编号：");
		JTextField NumTextField = new JTextField();
		NumLable.setBounds(30, 250, 40, 30);
		NumTextField.setBounds(72, 250, 65, 30);
		
		//创建得分与得分输入框
		JLabel SexLable = new JLabel("得分：");
		JTextField ComboBoxlist = new JTextField();
		SexLable.setBounds(260, 250, 40, 30);
		ComboBoxlist.setBounds(302, 250, 65, 30);
		
		//创建增加按钮
		JButton AddBtn = new JButton("确认");
		AddBtn.setBounds(35, 300, 65, 30);
		
		//创建IO
		File files01 = new File("人名单.txt");//创建文件对象
		File files02 = new File("性别单.txt");//创建文件对象
		File files1 = new File("1(5).txt");//创建文件对象
		File files2 = new File("2(5).txt");//创建文件对象
		File files3 = new File("3(5).txt");//创建文件对象
		File files4 = new File("4(5).txt");//创建文件对象
		File files5 = new File("5(5).txt");//创建文件对象
		File files6 = new File("6(5).txt");//创建文件对象
		File files7 = new File("7(5).txt");//创建文件对象
		File files8 = new File("8(5).txt");//创建文件对象
		File files9 = new File("9(5).txt");//创建文件对象
		File files10 = new File("10(5).txt");//创建文件对象
		File files11 = new File("11(5).txt");//创建文件对象
		File files12 = new File("12(5).txt");//创建文件对象
		File files13 = new File("13(5).txt");//创建文件对象
		File files14 = new File("14(5).txt");//创建文件对象
		File files15 = new File("15(5).txt");//创建文件对象
		File files16 = new File("16(5).txt");//创建文件对象
		File files17 = new File("17(5).txt");//创建文件对象
		File files18 = new File("18(5).txt");//创建文件对象
		File files19 = new File("19(5).txt");//创建文件对象
		File files20 = new File("20(5).txt");//创建文件对象
		File files21 = new File("21(5).txt");//创建文件对象
		File files22 = new File("22(5).txt");//创建文件对象
		File files23 = new File("23(5).txt");//创建文件对象
		File files24 = new File("24(5).txt");//创建文件对象
		File files25 = new File("25(5).txt");//创建文件对象
		File files26 = new File("26(5).txt");//创建文件对象
		File files27 = new File("27(5).txt");//创建文件对象
		File files28 = new File("28(5).txt");//创建文件对象
		File files29 = new File("29(5).txt");//创建文件对象
		File files30 = new File("30(5).txt");//创建文件对象
		
		FileReader fr1;
		fr1 = new FileReader(files01);
		char[] data1 = new char[99];			//定义char数组
		int length1 = 0;
		String str1 = null;
		while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
			String str = new String(data1,0,length1);//根据读取的内容创建String对象
			str1 = str;
		}
		String[] name = str1.split(";");//使用split根据；将字符串拆分成字符串数组
		
		FileReader fr2;
		fr2 = new FileReader(files02);
		char[] data2 = new char[99];			//定义char数组
		int length2 = 0;
		String str2 = null;
		while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
			String str = new String(data2,0,length2);//根据读取的内容创建String对象
			str2 = str;
		}
		String[] gender = str2.split(";");//使用split根据；将字符串拆分成字符串数组
		/**
		 * 创建数据容器
		 */
		// 创建表格内容的容器
		Object[][] context = new Object[][]{
			{"1",name[0],gender[0],dateStr},{"2",name[1],gender[1],dateStr},
			{"3",name[2],gender[2],dateStr},{"4",name[3],gender[3],dateStr},
			{"5",name[4],gender[4],dateStr},{"6",name[5],gender[5],dateStr},
			{"7",name[6],gender[6],dateStr},{"8",name[7],gender[7],dateStr},
			{"9",name[8],gender[8],dateStr},{"10",name[9],gender[9],dateStr},
			{"11",name[10],gender[10],dateStr},{"12",name[11],gender[11],dateStr},
			{"13",name[12],gender[12],dateStr},{"14",name[13],gender[13],dateStr},
			{"15",name[14],gender[14],dateStr},{"16",name[15],gender[15],dateStr},
			{"17",name[16],gender[16],dateStr},{"18",name[17],gender[17],dateStr},
			{"19",name[18],gender[18],dateStr},{"20",name[19],gender[19],dateStr},
			{"21",name[20],gender[20],dateStr},{"22",name[21],gender[21],dateStr},
			{"23",name[22],gender[22],dateStr},{"24",name[23],gender[23],dateStr},
			{"25",name[24],gender[24],dateStr},{"26",name[25],gender[25],dateStr},
			{"27",name[26],gender[26],dateStr},{"28",name[27],gender[27],dateStr},
			{"29",name[28],gender[28],dateStr},{"30",name[29],gender[29],dateStr},
		};
		
		// 创建表头的数据容器
		Object[] title = new Object[]{"编号","姓名","性别","时间"};
		// 创建DefaultTableMode模型 管理数据容器
		DefaultTableModel model = new DefaultTableModel(context, title);
		// 创建表格
		JTable table = new JTable(model);
		// 创建table滚动窗体
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBounds(30, 30, 440, 200);
		//定义表格每列宽度
		table.getColumn("编号").setPreferredWidth(5);
		table.getColumn("姓名").setPreferredWidth(5);
		table.getColumn("性别").setPreferredWidth(5);
		
		//创建监听器
		AddBtn.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String Num = NumTextField.getText();
				String defen = ComboBoxlist.getText();
				
				//将得分放入文档
				int intNum = Integer.parseInt(Num);//将Num类型由string转为int
				if(intNum == 1) {
					FileWriter fw;
					try {
						fw = new FileWriter(files1,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e1) {
						// TODO 自动生成的 catch 块
						e1.printStackTrace();
					}
				}
				if(intNum == 2) {
					FileWriter fw;
					try {
						fw = new FileWriter(files2,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e2) {
						// TODO 自动生成的 catch 块
						e2.printStackTrace();
					}
				}
				if(intNum == 3) {
					FileWriter fw;
					try {
						fw = new FileWriter(files3,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e3) {
						// TODO 自动生成的 catch 块
						e3.printStackTrace();
					}
				}
				if(intNum == 4) {
					FileWriter fw;
					try {
						fw = new FileWriter(files4,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e4) {
						// TODO 自动生成的 catch 块
						e4.printStackTrace();
					}
				}
				if(intNum == 5) {
					FileWriter fw;
					try {
						fw = new FileWriter(files5,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e5) {
						// TODO 自动生成的 catch 块
						e5.printStackTrace();
					}
				}
				if(intNum == 6) {
					FileWriter fw;
					try {
						fw = new FileWriter(files6,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e6) {
						// TODO 自动生成的 catch 块
						e6.printStackTrace();
					}
				}
				if(intNum == 7) {
					FileWriter fw;
					try {
						fw = new FileWriter(files7,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e7) {
						// TODO 自动生成的 catch 块
						e7.printStackTrace();
					}
				}
				if(intNum == 8) {
					FileWriter fw;
					try {
						fw = new FileWriter(files8,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e8) {
						// TODO 自动生成的 catch 块
						e8.printStackTrace();
					}
				}
				if(intNum == 9) {
					FileWriter fw;
					try {
						fw = new FileWriter(files9,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e9) {
						// TODO 自动生成的 catch 块
						e9.printStackTrace();
					}
				}
				if(intNum == 10) {
					FileWriter fw;
					try {
						fw = new FileWriter(files10,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e10) {
						// TODO 自动生成的 catch 块
						e10.printStackTrace();
					}
				}
				if(intNum == 11) {
					FileWriter fw;
					try {
						fw = new FileWriter(files11,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e11) {
						// TODO 自动生成的 catch 块
						e11.printStackTrace();
					}
				}
				if(intNum == 12) {
					FileWriter fw;
					try {
						fw = new FileWriter(files12,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e12) {
						// TODO 自动生成的 catch 块
						e12.printStackTrace();
					}
				}
				if(intNum == 13) {
					FileWriter fw;
					try {
						fw = new FileWriter(files13,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e13) {
						// TODO 自动生成的 catch 块
						e13.printStackTrace();
					}
				}
				if(intNum == 14) {
					FileWriter fw;
					try {
						fw = new FileWriter(files14,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e14) {
						// TODO 自动生成的 catch 块
						e14.printStackTrace();
					}
				}
				if(intNum == 15) {
					FileWriter fw;
					try {
						fw = new FileWriter(files15,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e15) {
						// TODO 自动生成的 catch 块
						e15.printStackTrace();
					}
				}
				if(intNum == 16) {
					FileWriter fw;
					try {
						fw = new FileWriter(files16,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e16) {
						// TODO 自动生成的 catch 块
						e16.printStackTrace();
					}
				}
				if(intNum == 17) {
					FileWriter fw;
					try {
						fw = new FileWriter(files17,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e17) {
						// TODO 自动生成的 catch 块
						e17.printStackTrace();
					}
				}
				if(intNum == 18) {
					FileWriter fw;
					try {
						fw = new FileWriter(files18,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e18) {
						// TODO 自动生成的 catch 块
						e18.printStackTrace();
					}
				}
				if(intNum == 19) {
					FileWriter fw;
					try {
						fw = new FileWriter(files19,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e19) {
						// TODO 自动生成的 catch 块
						e19.printStackTrace();
					}
				}
				if(intNum == 20) {
					FileWriter fw;
					try {
						fw = new FileWriter(files20,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e20) {
						// TODO 自动生成的 catch 块
						e20.printStackTrace();
					}
				}
				if(intNum == 21) {
					FileWriter fw;
					try {
						fw = new FileWriter(files21,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e21) {
						// TODO 自动生成的 catch 块
						e21.printStackTrace();
					}
				}
				if(intNum == 22) {
					FileWriter fw;
					try {
						fw = new FileWriter(files22,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e22) {
						// TODO 自动生成的 catch 块
						e22.printStackTrace();
					}
				}
				if(intNum == 23) {
					FileWriter fw;
					try {
						fw = new FileWriter(files23,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e23) {
						// TODO 自动生成的 catch 块
						e23.printStackTrace();
					}
				}
				if(intNum == 24) {
					FileWriter fw;
					try {
						fw = new FileWriter(files24,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e24) {
						// TODO 自动生成的 catch 块
						e24.printStackTrace();
					}
				}
				if(intNum == 25) {
					FileWriter fw;
					try {
						fw = new FileWriter(files25,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e25) {
						// TODO 自动生成的 catch 块
						e25.printStackTrace();
					}
				}
				if(intNum == 26) {
					FileWriter fw;
					try {
						fw = new FileWriter(files26,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e26) {
						// TODO 自动生成的 catch 块
						e26.printStackTrace();
					}
				}
				if(intNum == 27) {
					FileWriter fw;
					try {
						fw = new FileWriter(files27,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e27) {
						// TODO 自动生成的 catch 块
						e27.printStackTrace();
					}
				}
				if(intNum == 28) {
					FileWriter fw;
					try {
						fw = new FileWriter(files28,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e28) {
						// TODO 自动生成的 catch 块
						e28.printStackTrace();
					}
				}
				if(intNum == 29) {
					FileWriter fw;
					try {
						fw = new FileWriter(files29,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e29) {
						// TODO 自动生成的 catch 块
						e29.printStackTrace();
					}
				}if(intNum == 30) {
					FileWriter fw;
					try {
						fw = new FileWriter(files30,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e30) {
						// TODO 自动生成的 catch 块
						e30.printStackTrace();
					}
				}
				
				//增加后清空数据
				NumTextField.setText("");
			}
		});
		
		// 创建container
		Container container = this.getContentPane();
		container.add(scrollPane);
		container.add(NumLable);
		container.add(NumTextField);
		container.add(SexLable);
		container.add(ComboBoxlist);
		container.add(AddBtn);
		// 设置布局管理器
		this.setLayout(null);
		/**
		 * 设置窗体属性
		 */
		this.setTitle("点名");
		this.setVisible(true);
		this.setSize(500, 500);
		this.setLocationRelativeTo(null);// 设置居中显示
		// 设置Jframe窗体关闭时 程序结束
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	@SuppressWarnings("unused")
	public static void main1(String[] args) throws IOException {
    	// TODO 自动生成的构造函数存根
		Dianming frame=new Dianming();
    }
}
________________________________________________________________________________________________________________________________________________________________________________
Ketang.java:
package chengxu;

import javax.swing.JButton;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.io.*;

public class Ketang extends JFrame {
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
	public static void main(String args[]) throws IOException {
		Ketang frame = new Ketang();
		frame.setVisible(true);
	}
 
	@SuppressWarnings({ "null", "unused", "resource" })
	public Ketang () throws IOException
	{
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
		Date date = new Date();//创建一个date对象保存当前时间
		String dateStr = simpleDateFormat.format(date);//format()方法将Date转换成指定格式的String
		/**
		 * 创建按钮和其他组件
		 */
		// 创建编号与编号输入框
		JLabel NumLable = new JLabel("编号：");
		JTextField NumTextField = new JTextField();
		NumLable.setBounds(30, 250, 40, 30);
		NumTextField.setBounds(72, 250, 65, 30);
		
		//创建得分与得分输入框
		JLabel SexLable = new JLabel("得分：");
		JTextField ComboBoxlist = new JTextField();
		SexLable.setBounds(260, 250, 40, 30);
		ComboBoxlist.setBounds(302, 250, 65, 30);
		
		//创建增加按钮
		JButton AddBtn = new JButton("确认");
		AddBtn.setBounds(35, 300, 65, 30);
		
		//创建IO
		File files01 = new File("人名单.txt");//创建文件对象
		File files02 = new File("性别单.txt");//创建文件对象
		File files1 = new File("1(5).txt");//创建文件对象
		File files2 = new File("2(5).txt");//创建文件对象
		File files3 = new File("3(5).txt");//创建文件对象
		File files4 = new File("4(5).txt");//创建文件对象
		File files5 = new File("5(5).txt");//创建文件对象
		File files6 = new File("6(5).txt");//创建文件对象
		File files7 = new File("7(5).txt");//创建文件对象
		File files8 = new File("8(5).txt");//创建文件对象
		File files9 = new File("9(5).txt");//创建文件对象
		File files10 = new File("10(5).txt");//创建文件对象
		File files11 = new File("11(5).txt");//创建文件对象
		File files12 = new File("12(5).txt");//创建文件对象
		File files13 = new File("13(5).txt");//创建文件对象
		File files14 = new File("14(5).txt");//创建文件对象
		File files15 = new File("15(5).txt");//创建文件对象
		File files16 = new File("16(5).txt");//创建文件对象
		File files17 = new File("17(5).txt");//创建文件对象
		File files18 = new File("18(5).txt");//创建文件对象
		File files19 = new File("19(5).txt");//创建文件对象
		File files20 = new File("20(5).txt");//创建文件对象
		File files21 = new File("21(5).txt");//创建文件对象
		File files22 = new File("22(5).txt");//创建文件对象
		File files23 = new File("23(5).txt");//创建文件对象
		File files24 = new File("24(5).txt");//创建文件对象
		File files25 = new File("25(5).txt");//创建文件对象
		File files26 = new File("26(5).txt");//创建文件对象
		File files27 = new File("27(5).txt");//创建文件对象
		File files28 = new File("28(5).txt");//创建文件对象
		File files29 = new File("29(5).txt");//创建文件对象
		File files30 = new File("30(5).txt");//创建文件对象
		
		FileReader fr1;
		fr1 = new FileReader(files01);
		char[] data1 = new char[99];			//定义char数组
		int length1 = 0;
		String str1 = null;
		while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
			String str = new String(data1,0,length1);//根据读取的内容创建String对象
			str1 = str;
		}
		String[] name = str1.split(";");//使用split根据；将字符串拆分成字符串数组
		
		FileReader fr2;
		fr2 = new FileReader(files02);
		char[] data2 = new char[99];			//定义char数组
		int length2 = 0;
		String str2 = null;
		while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
			String str = new String(data2,0,length2);//根据读取的内容创建String对象
			str2 = str;
		}
		String[] gender = str2.split(";");//使用split根据；将字符串拆分成字符串数组
		/**
		 * 创建数据容器
		 */
		// 创建表格内容的容器
		Object[][] context = new Object[][]{
			{"1",name[0],gender[0],dateStr},{"2",name[1],gender[1],dateStr},
			{"3",name[2],gender[2],dateStr},{"4",name[3],gender[3],dateStr},
			{"5",name[4],gender[4],dateStr},{"6",name[5],gender[5],dateStr},
			{"7",name[6],gender[6],dateStr},{"8",name[7],gender[7],dateStr},
			{"9",name[8],gender[8],dateStr},{"10",name[9],gender[9],dateStr},
			{"11",name[10],gender[10],dateStr},{"12",name[11],gender[11],dateStr},
			{"13",name[12],gender[12],dateStr},{"14",name[13],gender[13],dateStr},
			{"15",name[14],gender[14],dateStr},{"16",name[15],gender[15],dateStr},
			{"17",name[16],gender[16],dateStr},{"18",name[17],gender[17],dateStr},
			{"19",name[18],gender[18],dateStr},{"20",name[19],gender[19],dateStr},
			{"21",name[20],gender[20],dateStr},{"22",name[21],gender[21],dateStr},
			{"23",name[22],gender[22],dateStr},{"24",name[23],gender[23],dateStr},
			{"25",name[24],gender[24],dateStr},{"26",name[25],gender[25],dateStr},
			{"27",name[26],gender[26],dateStr},{"28",name[27],gender[27],dateStr},
			{"29",name[28],gender[28],dateStr},{"30",name[29],gender[29],dateStr},
		};
		
		// 创建表头的数据容器
		Object[] title = new Object[]{"编号","姓名","性别","时间"};
		// 创建DefaultTableMode模型 管理数据容器
		DefaultTableModel model = new DefaultTableModel(context, title);
		// 创建表格
		JTable table = new JTable(model);
		// 创建table滚动窗体
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBounds(30, 30, 440, 200);
		//定义表格每列宽度
		table.getColumn("编号").setPreferredWidth(5);
		table.getColumn("姓名").setPreferredWidth(5);
		table.getColumn("性别").setPreferredWidth(5);
		
		//创建监听器
		AddBtn.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String Num = NumTextField.getText();
				String defen = ComboBoxlist.getText();
				
				//将得分放入文档
				int intNum = Integer.parseInt(Num);//将Num类型由string转为int
				if(intNum == 1) {
					FileWriter fw;
					try {
						fw = new FileWriter(files1,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e1) {
						// TODO 自动生成的 catch 块
						e1.printStackTrace();
					}
				}
				if(intNum == 2) {
					FileWriter fw;
					try {
						fw = new FileWriter(files2,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e2) {
						// TODO 自动生成的 catch 块
						e2.printStackTrace();
					}
				}
				if(intNum == 3) {
					FileWriter fw;
					try {
						fw = new FileWriter(files3,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e3) {
						// TODO 自动生成的 catch 块
						e3.printStackTrace();
					}
				}
				if(intNum == 4) {
					FileWriter fw;
					try {
						fw = new FileWriter(files4,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e4) {
						// TODO 自动生成的 catch 块
						e4.printStackTrace();
					}
				}
				if(intNum == 5) {
					FileWriter fw;
					try {
						fw = new FileWriter(files5,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e5) {
						// TODO 自动生成的 catch 块
						e5.printStackTrace();
					}
				}
				if(intNum == 6) {
					FileWriter fw;
					try {
						fw = new FileWriter(files6,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e6) {
						// TODO 自动生成的 catch 块
						e6.printStackTrace();
					}
				}
				if(intNum == 7) {
					FileWriter fw;
					try {
						fw = new FileWriter(files7,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e7) {
						// TODO 自动生成的 catch 块
						e7.printStackTrace();
					}
				}
				if(intNum == 8) {
					FileWriter fw;
					try {
						fw = new FileWriter(files8,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e8) {
						// TODO 自动生成的 catch 块
						e8.printStackTrace();
					}
				}
				if(intNum == 9) {
					FileWriter fw;
					try {
						fw = new FileWriter(files9,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e9) {
						// TODO 自动生成的 catch 块
						e9.printStackTrace();
					}
				}
				if(intNum == 10) {
					FileWriter fw;
					try {
						fw = new FileWriter(files10,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e10) {
						// TODO 自动生成的 catch 块
						e10.printStackTrace();
					}
				}
				if(intNum == 11) {
					FileWriter fw;
					try {
						fw = new FileWriter(files11,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e11) {
						// TODO 自动生成的 catch 块
						e11.printStackTrace();
					}
				}
				if(intNum == 12) {
					FileWriter fw;
					try {
						fw = new FileWriter(files12,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e12) {
						// TODO 自动生成的 catch 块
						e12.printStackTrace();
					}
				}
				if(intNum == 13) {
					FileWriter fw;
					try {
						fw = new FileWriter(files13,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e13) {
						// TODO 自动生成的 catch 块
						e13.printStackTrace();
					}
				}
				if(intNum == 14) {
					FileWriter fw;
					try {
						fw = new FileWriter(files14,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e14) {
						// TODO 自动生成的 catch 块
						e14.printStackTrace();
					}
				}
				if(intNum == 15) {
					FileWriter fw;
					try {
						fw = new FileWriter(files15,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e15) {
						// TODO 自动生成的 catch 块
						e15.printStackTrace();
					}
				}
				if(intNum == 16) {
					FileWriter fw;
					try {
						fw = new FileWriter(files16,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e16) {
						// TODO 自动生成的 catch 块
						e16.printStackTrace();
					}
				}
				if(intNum == 17) {
					FileWriter fw;
					try {
						fw = new FileWriter(files17,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e17) {
						// TODO 自动生成的 catch 块
						e17.printStackTrace();
					}
				}
				if(intNum == 18) {
					FileWriter fw;
					try {
						fw = new FileWriter(files18,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e18) {
						// TODO 自动生成的 catch 块
						e18.printStackTrace();
					}
				}
				if(intNum == 19) {
					FileWriter fw;
					try {
						fw = new FileWriter(files19,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e19) {
						// TODO 自动生成的 catch 块
						e19.printStackTrace();
					}
				}
				if(intNum == 20) {
					FileWriter fw;
					try {
						fw = new FileWriter(files20,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e20) {
						// TODO 自动生成的 catch 块
						e20.printStackTrace();
					}
				}
				if(intNum == 21) {
					FileWriter fw;
					try {
						fw = new FileWriter(files21,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e21) {
						// TODO 自动生成的 catch 块
						e21.printStackTrace();
					}
				}
				if(intNum == 22) {
					FileWriter fw;
					try {
						fw = new FileWriter(files22,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e22) {
						// TODO 自动生成的 catch 块
						e22.printStackTrace();
					}
				}
				if(intNum == 23) {
					FileWriter fw;
					try {
						fw = new FileWriter(files23,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e23) {
						// TODO 自动生成的 catch 块
						e23.printStackTrace();
					}
				}
				if(intNum == 24) {
					FileWriter fw;
					try {
						fw = new FileWriter(files24,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e24) {
						// TODO 自动生成的 catch 块
						e24.printStackTrace();
					}
				}
				if(intNum == 25) {
					FileWriter fw;
					try {
						fw = new FileWriter(files25,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e25) {
						// TODO 自动生成的 catch 块
						e25.printStackTrace();
					}
				}
				if(intNum == 26) {
					FileWriter fw;
					try {
						fw = new FileWriter(files26,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e26) {
						// TODO 自动生成的 catch 块
						e26.printStackTrace();
					}
				}
				if(intNum == 27) {
					FileWriter fw;
					try {
						fw = new FileWriter(files27,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e27) {
						// TODO 自动生成的 catch 块
						e27.printStackTrace();
					}
				}
				if(intNum == 28) {
					FileWriter fw;
					try {
						fw = new FileWriter(files28,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e28) {
						// TODO 自动生成的 catch 块
						e28.printStackTrace();
					}
				}
				if(intNum == 29) {
					FileWriter fw;
					try {
						fw = new FileWriter(files29,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e29) {
						// TODO 自动生成的 catch 块
						e29.printStackTrace();
					}
				}if(intNum == 30) {
					FileWriter fw;
					try {
						fw = new FileWriter(files30,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e30) {
						// TODO 自动生成的 catch 块
						e30.printStackTrace();
					}
				}
				
				//增加后清空数据
				NumTextField.setText("");
			}
		});
		
		// 创建container
		Container container = this.getContentPane();
		container.add(scrollPane);
		container.add(NumLable);
		container.add(NumTextField);
		container.add(SexLable);
		container.add(ComboBoxlist);
		container.add(AddBtn);
		// 设置布局管理器
		this.setLayout(null);
		/**
		 * 设置窗体属性
		 */
		this.setTitle("课堂");
		this.setVisible(true);
		this.setSize(500, 500);
		this.setLocationRelativeTo(null);// 设置居中显示
		// 设置Jframe窗体关闭时 程序结束
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	@SuppressWarnings("unused")
	public static void main1(String[] args) throws IOException {
    	// TODO 自动生成的构造函数存根
		Ketang frame=new Ketang();
    }
}
_______________________________________________________________________________________________________________________________________________________________________________
Zuoye.java:
package chengxu;

import javax.swing.JButton;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.io.*;

public class Zuoye extends JFrame {
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
	public static void main(String args[]) throws IOException {
		Zuoye frame = new Zuoye();
		frame.setVisible(true);
	}
 
	@SuppressWarnings({ "null", "unused", "resource" })
	public Zuoye () throws IOException
	{
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
		Date date = new Date();//创建一个date对象保存当前时间
		String dateStr = simpleDateFormat.format(date);//format()方法将Date转换成指定格式的String
		/**
		 * 创建按钮和其他组件
		 */
		// 创建编号与编号输入框
		JLabel NumLable = new JLabel("编号：");
		JTextField NumTextField = new JTextField();
		NumLable.setBounds(30, 250, 40, 30);
		NumTextField.setBounds(72, 250, 65, 30);
		
		//创建得分与得分输入框
		JLabel SexLable = new JLabel("得分：");
		JTextField ComboBoxlist = new JTextField();
		SexLable.setBounds(260, 250, 40, 30);
		ComboBoxlist.setBounds(302, 250, 65, 30);
		
		//创建增加按钮
		JButton AddBtn = new JButton("确认");
		AddBtn.setBounds(35, 300, 65, 30);
		
		//创建IO
		File files01 = new File("人名单.txt");//创建文件对象
		File files02 = new File("性别单.txt");//创建文件对象
		File files1 = new File("1(5).txt");//创建文件对象
		File files2 = new File("2(5).txt");//创建文件对象
		File files3 = new File("3(5).txt");//创建文件对象
		File files4 = new File("4(5).txt");//创建文件对象
		File files5 = new File("5(5).txt");//创建文件对象
		File files6 = new File("6(5).txt");//创建文件对象
		File files7 = new File("7(5).txt");//创建文件对象
		File files8 = new File("8(5).txt");//创建文件对象
		File files9 = new File("9(5).txt");//创建文件对象
		File files10 = new File("10(5).txt");//创建文件对象
		File files11 = new File("11(5).txt");//创建文件对象
		File files12 = new File("12(5).txt");//创建文件对象
		File files13 = new File("13(5).txt");//创建文件对象
		File files14 = new File("14(5).txt");//创建文件对象
		File files15 = new File("15(5).txt");//创建文件对象
		File files16 = new File("16(5).txt");//创建文件对象
		File files17 = new File("17(5).txt");//创建文件对象
		File files18 = new File("18(5).txt");//创建文件对象
		File files19 = new File("19(5).txt");//创建文件对象
		File files20 = new File("20(5).txt");//创建文件对象
		File files21 = new File("21(5).txt");//创建文件对象
		File files22 = new File("22(5).txt");//创建文件对象
		File files23 = new File("23(5).txt");//创建文件对象
		File files24 = new File("24(5).txt");//创建文件对象
		File files25 = new File("25(5).txt");//创建文件对象
		File files26 = new File("26(5).txt");//创建文件对象
		File files27 = new File("27(5).txt");//创建文件对象
		File files28 = new File("28(5).txt");//创建文件对象
		File files29 = new File("29(5).txt");//创建文件对象
		File files30 = new File("30(5).txt");//创建文件对象
		
		FileReader fr1;
		fr1 = new FileReader(files01);
		char[] data1 = new char[99];			//定义char数组
		int length1 = 0;
		String str1 = null;
		while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
			String str = new String(data1,0,length1);//根据读取的内容创建String对象
			str1 = str;
		}
		String[] name = str1.split(";");//使用split根据；将字符串拆分成字符串数组
		
		FileReader fr2;
		fr2 = new FileReader(files02);
		char[] data2 = new char[99];			//定义char数组
		int length2 = 0;
		String str2 = null;
		while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
			String str = new String(data2,0,length2);//根据读取的内容创建String对象
			str2 = str;
		}
		String[] gender = str2.split(";");//使用split根据；将字符串拆分成字符串数组
		/**
		 * 创建数据容器
		 */
		// 创建表格内容的容器
		Object[][] context = new Object[][]{
			{"1",name[0],gender[0],dateStr},{"2",name[1],gender[1],dateStr},
			{"3",name[2],gender[2],dateStr},{"4",name[3],gender[3],dateStr},
			{"5",name[4],gender[4],dateStr},{"6",name[5],gender[5],dateStr},
			{"7",name[6],gender[6],dateStr},{"8",name[7],gender[7],dateStr},
			{"9",name[8],gender[8],dateStr},{"10",name[9],gender[9],dateStr},
			{"11",name[10],gender[10],dateStr},{"12",name[11],gender[11],dateStr},
			{"13",name[12],gender[12],dateStr},{"14",name[13],gender[13],dateStr},
			{"15",name[14],gender[14],dateStr},{"16",name[15],gender[15],dateStr},
			{"17",name[16],gender[16],dateStr},{"18",name[17],gender[17],dateStr},
			{"19",name[18],gender[18],dateStr},{"20",name[19],gender[19],dateStr},
			{"21",name[20],gender[20],dateStr},{"22",name[21],gender[21],dateStr},
			{"23",name[22],gender[22],dateStr},{"24",name[23],gender[23],dateStr},
			{"25",name[24],gender[24],dateStr},{"26",name[25],gender[25],dateStr},
			{"27",name[26],gender[26],dateStr},{"28",name[27],gender[27],dateStr},
			{"29",name[28],gender[28],dateStr},{"30",name[29],gender[29],dateStr},
		};
		
		// 创建表头的数据容器
		Object[] title = new Object[]{"编号","姓名","性别","时间"};
		// 创建DefaultTableMode模型 管理数据容器
		DefaultTableModel model = new DefaultTableModel(context, title);
		// 创建表格
		JTable table = new JTable(model);
		// 创建table滚动窗体
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBounds(30, 30, 440, 200);
		//定义表格每列宽度
		table.getColumn("编号").setPreferredWidth(5);
		table.getColumn("姓名").setPreferredWidth(5);
		table.getColumn("性别").setPreferredWidth(5);
		
		//创建监听器
		AddBtn.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String Num = NumTextField.getText();
				String defen = ComboBoxlist.getText();
				
				//将得分放入文档
				int intNum = Integer.parseInt(Num);//将Num类型由string转为int
				if(intNum == 1) {
					FileWriter fw;
					try {
						fw = new FileWriter(files1,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e1) {
						// TODO 自动生成的 catch 块
						e1.printStackTrace();
					}
				}
				if(intNum == 2) {
					FileWriter fw;
					try {
						fw = new FileWriter(files2,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e2) {
						// TODO 自动生成的 catch 块
						e2.printStackTrace();
					}
				}
				if(intNum == 3) {
					FileWriter fw;
					try {
						fw = new FileWriter(files3,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e3) {
						// TODO 自动生成的 catch 块
						e3.printStackTrace();
					}
				}
				if(intNum == 4) {
					FileWriter fw;
					try {
						fw = new FileWriter(files4,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e4) {
						// TODO 自动生成的 catch 块
						e4.printStackTrace();
					}
				}
				if(intNum == 5) {
					FileWriter fw;
					try {
						fw = new FileWriter(files5,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e5) {
						// TODO 自动生成的 catch 块
						e5.printStackTrace();
					}
				}
				if(intNum == 6) {
					FileWriter fw;
					try {
						fw = new FileWriter(files6,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e6) {
						// TODO 自动生成的 catch 块
						e6.printStackTrace();
					}
				}
				if(intNum == 7) {
					FileWriter fw;
					try {
						fw = new FileWriter(files7,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e7) {
						// TODO 自动生成的 catch 块
						e7.printStackTrace();
					}
				}
				if(intNum == 8) {
					FileWriter fw;
					try {
						fw = new FileWriter(files8,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e8) {
						// TODO 自动生成的 catch 块
						e8.printStackTrace();
					}
				}
				if(intNum == 9) {
					FileWriter fw;
					try {
						fw = new FileWriter(files9,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e9) {
						// TODO 自动生成的 catch 块
						e9.printStackTrace();
					}
				}
				if(intNum == 10) {
					FileWriter fw;
					try {
						fw = new FileWriter(files10,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e10) {
						// TODO 自动生成的 catch 块
						e10.printStackTrace();
					}
				}
				if(intNum == 11) {
					FileWriter fw;
					try {
						fw = new FileWriter(files11,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e11) {
						// TODO 自动生成的 catch 块
						e11.printStackTrace();
					}
				}
				if(intNum == 12) {
					FileWriter fw;
					try {
						fw = new FileWriter(files12,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e12) {
						// TODO 自动生成的 catch 块
						e12.printStackTrace();
					}
				}
				if(intNum == 13) {
					FileWriter fw;
					try {
						fw = new FileWriter(files13,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e13) {
						// TODO 自动生成的 catch 块
						e13.printStackTrace();
					}
				}
				if(intNum == 14) {
					FileWriter fw;
					try {
						fw = new FileWriter(files14,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e14) {
						// TODO 自动生成的 catch 块
						e14.printStackTrace();
					}
				}
				if(intNum == 15) {
					FileWriter fw;
					try {
						fw = new FileWriter(files15,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e15) {
						// TODO 自动生成的 catch 块
						e15.printStackTrace();
					}
				}
				if(intNum == 16) {
					FileWriter fw;
					try {
						fw = new FileWriter(files16,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e16) {
						// TODO 自动生成的 catch 块
						e16.printStackTrace();
					}
				}
				if(intNum == 17) {
					FileWriter fw;
					try {
						fw = new FileWriter(files17,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e17) {
						// TODO 自动生成的 catch 块
						e17.printStackTrace();
					}
				}
				if(intNum == 18) {
					FileWriter fw;
					try {
						fw = new FileWriter(files18,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e18) {
						// TODO 自动生成的 catch 块
						e18.printStackTrace();
					}
				}
				if(intNum == 19) {
					FileWriter fw;
					try {
						fw = new FileWriter(files19,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e19) {
						// TODO 自动生成的 catch 块
						e19.printStackTrace();
					}
				}
				if(intNum == 20) {
					FileWriter fw;
					try {
						fw = new FileWriter(files20,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e20) {
						// TODO 自动生成的 catch 块
						e20.printStackTrace();
					}
				}
				if(intNum == 21) {
					FileWriter fw;
					try {
						fw = new FileWriter(files21,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e21) {
						// TODO 自动生成的 catch 块
						e21.printStackTrace();
					}
				}
				if(intNum == 22) {
					FileWriter fw;
					try {
						fw = new FileWriter(files22,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e22) {
						// TODO 自动生成的 catch 块
						e22.printStackTrace();
					}
				}
				if(intNum == 23) {
					FileWriter fw;
					try {
						fw = new FileWriter(files23,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e23) {
						// TODO 自动生成的 catch 块
						e23.printStackTrace();
					}
				}
				if(intNum == 24) {
					FileWriter fw;
					try {
						fw = new FileWriter(files24,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e24) {
						// TODO 自动生成的 catch 块
						e24.printStackTrace();
					}
				}
				if(intNum == 25) {
					FileWriter fw;
					try {
						fw = new FileWriter(files25,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e25) {
						// TODO 自动生成的 catch 块
						e25.printStackTrace();
					}
				}
				if(intNum == 26) {
					FileWriter fw;
					try {
						fw = new FileWriter(files26,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e26) {
						// TODO 自动生成的 catch 块
						e26.printStackTrace();
					}
				}
				if(intNum == 27) {
					FileWriter fw;
					try {
						fw = new FileWriter(files27,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e27) {
						// TODO 自动生成的 catch 块
						e27.printStackTrace();
					}
				}
				if(intNum == 28) {
					FileWriter fw;
					try {
						fw = new FileWriter(files28,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e28) {
						// TODO 自动生成的 catch 块
						e28.printStackTrace();
					}
				}
				if(intNum == 29) {
					FileWriter fw;
					try {
						fw = new FileWriter(files29,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e29) {
						// TODO 自动生成的 catch 块
						e29.printStackTrace();
					}
				}if(intNum == 30) {
					FileWriter fw;
					try {
						fw = new FileWriter(files30,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e30) {
						// TODO 自动生成的 catch 块
						e30.printStackTrace();
					}
				}
				
				//增加后清空数据
				NumTextField.setText("");
			}
		});
		
		// 创建container
		Container container = this.getContentPane();
		container.add(scrollPane);
		container.add(NumLable);
		container.add(NumTextField);
		container.add(SexLable);
		container.add(ComboBoxlist);
		container.add(AddBtn);
		// 设置布局管理器
		this.setLayout(null);
		/**
		 * 设置窗体属性
		 */
		this.setTitle("作业");
		this.setVisible(true);
		this.setSize(500, 500);
		this.setLocationRelativeTo(null);// 设置居中显示
		// 设置Jframe窗体关闭时 程序结束
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	@SuppressWarnings("unused")
	public static void main1(String[] args) throws IOException {
    	// TODO 自动生成的构造函数存根
		Zuoye frame=new Zuoye();
    }
}_______________________________________________________________________________________________________________________________________________________________________________
Ceshi.java:
package chengxu;

import javax.swing.JButton;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.io.*;

public class Ceshi extends JFrame {
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
	public static void main(String args[]) throws IOException {
		Ceshi frame = new Ceshi();
		frame.setVisible(true);
	}
 
	@SuppressWarnings({ "null", "unused", "resource" })
	public Ceshi () throws IOException
	{
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
		Date date = new Date();//创建一个date对象保存当前时间
		String dateStr = simpleDateFormat.format(date);//format()方法将Date转换成指定格式的String
		/**
		 * 创建按钮和其他组件
		 */
		// 创建编号与编号输入框
		JLabel NumLable = new JLabel("编号：");
		JTextField NumTextField = new JTextField();
		NumLable.setBounds(30, 250, 40, 30);
		NumTextField.setBounds(72, 250, 65, 30);
		
		//创建得分与得分输入框
		JLabel SexLable = new JLabel("得分：");
		JTextField ComboBoxlist = new JTextField();
		SexLable.setBounds(260, 250, 40, 30);
		ComboBoxlist.setBounds(302, 250, 65, 30);
		
		//创建增加按钮
		JButton AddBtn = new JButton("确认");
		AddBtn.setBounds(35, 300, 65, 30);
		
		//创建IO
		File files01 = new File("人名单.txt");//创建文件对象
		File files02 = new File("性别单.txt");//创建文件对象
		File files1 = new File("1(5).txt");//创建文件对象
		File files2 = new File("2(5).txt");//创建文件对象
		File files3 = new File("3(5).txt");//创建文件对象
		File files4 = new File("4(5).txt");//创建文件对象
		File files5 = new File("5(5).txt");//创建文件对象
		File files6 = new File("6(5).txt");//创建文件对象
		File files7 = new File("7(5).txt");//创建文件对象
		File files8 = new File("8(5).txt");//创建文件对象
		File files9 = new File("9(5).txt");//创建文件对象
		File files10 = new File("10(5).txt");//创建文件对象
		File files11 = new File("11(5).txt");//创建文件对象
		File files12 = new File("12(5).txt");//创建文件对象
		File files13 = new File("13(5).txt");//创建文件对象
		File files14 = new File("14(5).txt");//创建文件对象
		File files15 = new File("15(5).txt");//创建文件对象
		File files16 = new File("16(5).txt");//创建文件对象
		File files17 = new File("17(5).txt");//创建文件对象
		File files18 = new File("18(5).txt");//创建文件对象
		File files19 = new File("19(5).txt");//创建文件对象
		File files20 = new File("20(5).txt");//创建文件对象
		File files21 = new File("21(5).txt");//创建文件对象
		File files22 = new File("22(5).txt");//创建文件对象
		File files23 = new File("23(5).txt");//创建文件对象
		File files24 = new File("24(5).txt");//创建文件对象
		File files25 = new File("25(5).txt");//创建文件对象
		File files26 = new File("26(5).txt");//创建文件对象
		File files27 = new File("27(5).txt");//创建文件对象
		File files28 = new File("28(5).txt");//创建文件对象
		File files29 = new File("29(5).txt");//创建文件对象
		File files30 = new File("30(5).txt");//创建文件对象
		
		FileReader fr1;
		fr1 = new FileReader(files01);
		char[] data1 = new char[99];			//定义char数组
		int length1 = 0;
		String str1 = null;
		while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
			String str = new String(data1,0,length1);//根据读取的内容创建String对象
			str1 = str;
		}
		String[] name = str1.split(";");//使用split根据；将字符串拆分成字符串数组
		
		FileReader fr2;
		fr2 = new FileReader(files02);
		char[] data2 = new char[99];			//定义char数组
		int length2 = 0;
		String str2 = null;
		while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
			String str = new String(data2,0,length2);//根据读取的内容创建String对象
			str2 = str;
		}
		String[] gender = str2.split(";");//使用split根据；将字符串拆分成字符串数组
		/**
		 * 创建数据容器
		 */
		// 创建表格内容的容器
		Object[][] context = new Object[][]{
			{"1",name[0],gender[0],dateStr},{"2",name[1],gender[1],dateStr},
			{"3",name[2],gender[2],dateStr},{"4",name[3],gender[3],dateStr},
			{"5",name[4],gender[4],dateStr},{"6",name[5],gender[5],dateStr},
			{"7",name[6],gender[6],dateStr},{"8",name[7],gender[7],dateStr},
			{"9",name[8],gender[8],dateStr},{"10",name[9],gender[9],dateStr},
			{"11",name[10],gender[10],dateStr},{"12",name[11],gender[11],dateStr},
			{"13",name[12],gender[12],dateStr},{"14",name[13],gender[13],dateStr},
			{"15",name[14],gender[14],dateStr},{"16",name[15],gender[15],dateStr},
			{"17",name[16],gender[16],dateStr},{"18",name[17],gender[17],dateStr},
			{"19",name[18],gender[18],dateStr},{"20",name[19],gender[19],dateStr},
			{"21",name[20],gender[20],dateStr},{"22",name[21],gender[21],dateStr},
			{"23",name[22],gender[22],dateStr},{"24",name[23],gender[23],dateStr},
			{"25",name[24],gender[24],dateStr},{"26",name[25],gender[25],dateStr},
			{"27",name[26],gender[26],dateStr},{"28",name[27],gender[27],dateStr},
			{"29",name[28],gender[28],dateStr},{"30",name[29],gender[29],dateStr},
		};
		
		// 创建表头的数据容器
		Object[] title = new Object[]{"编号","姓名","性别","时间"};
		// 创建DefaultTableMode模型 管理数据容器
		DefaultTableModel model = new DefaultTableModel(context, title);
		// 创建表格
		JTable table = new JTable(model);
		// 创建table滚动窗体
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBounds(30, 30, 440, 200);
		//定义表格每列宽度
		table.getColumn("编号").setPreferredWidth(5);
		table.getColumn("姓名").setPreferredWidth(5);
		table.getColumn("性别").setPreferredWidth(5);
		
		//创建监听器
		AddBtn.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String Num = NumTextField.getText();
				String defen = ComboBoxlist.getText();
				
				//将得分放入文档
				int intNum = Integer.parseInt(Num);//将Num类型由string转为int
				if(intNum == 1) {
					FileWriter fw;
					try {
						fw = new FileWriter(files1,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e1) {
						// TODO 自动生成的 catch 块
						e1.printStackTrace();
					}
				}
				if(intNum == 2) {
					FileWriter fw;
					try {
						fw = new FileWriter(files2,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e2) {
						// TODO 自动生成的 catch 块
						e2.printStackTrace();
					}
				}
				if(intNum == 3) {
					FileWriter fw;
					try {
						fw = new FileWriter(files3,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e3) {
						// TODO 自动生成的 catch 块
						e3.printStackTrace();
					}
				}
				if(intNum == 4) {
					FileWriter fw;
					try {
						fw = new FileWriter(files4,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e4) {
						// TODO 自动生成的 catch 块
						e4.printStackTrace();
					}
				}
				if(intNum == 5) {
					FileWriter fw;
					try {
						fw = new FileWriter(files5,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e5) {
						// TODO 自动生成的 catch 块
						e5.printStackTrace();
					}
				}
				if(intNum == 6) {
					FileWriter fw;
					try {
						fw = new FileWriter(files6,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e6) {
						// TODO 自动生成的 catch 块
						e6.printStackTrace();
					}
				}
				if(intNum == 7) {
					FileWriter fw;
					try {
						fw = new FileWriter(files7,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e7) {
						// TODO 自动生成的 catch 块
						e7.printStackTrace();
					}
				}
				if(intNum == 8) {
					FileWriter fw;
					try {
						fw = new FileWriter(files8,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e8) {
						// TODO 自动生成的 catch 块
						e8.printStackTrace();
					}
				}
				if(intNum == 9) {
					FileWriter fw;
					try {
						fw = new FileWriter(files9,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e9) {
						// TODO 自动生成的 catch 块
						e9.printStackTrace();
					}
				}
				if(intNum == 10) {
					FileWriter fw;
					try {
						fw = new FileWriter(files10,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e10) {
						// TODO 自动生成的 catch 块
						e10.printStackTrace();
					}
				}
				if(intNum == 11) {
					FileWriter fw;
					try {
						fw = new FileWriter(files11,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e11) {
						// TODO 自动生成的 catch 块
						e11.printStackTrace();
					}
				}
				if(intNum == 12) {
					FileWriter fw;
					try {
						fw = new FileWriter(files12,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e12) {
						// TODO 自动生成的 catch 块
						e12.printStackTrace();
					}
				}
				if(intNum == 13) {
					FileWriter fw;
					try {
						fw = new FileWriter(files13,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e13) {
						// TODO 自动生成的 catch 块
						e13.printStackTrace();
					}
				}
				if(intNum == 14) {
					FileWriter fw;
					try {
						fw = new FileWriter(files14,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e14) {
						// TODO 自动生成的 catch 块
						e14.printStackTrace();
					}
				}
				if(intNum == 15) {
					FileWriter fw;
					try {
						fw = new FileWriter(files15,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e15) {
						// TODO 自动生成的 catch 块
						e15.printStackTrace();
					}
				}
				if(intNum == 16) {
					FileWriter fw;
					try {
						fw = new FileWriter(files16,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e16) {
						// TODO 自动生成的 catch 块
						e16.printStackTrace();
					}
				}
				if(intNum == 17) {
					FileWriter fw;
					try {
						fw = new FileWriter(files17,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e17) {
						// TODO 自动生成的 catch 块
						e17.printStackTrace();
					}
				}
				if(intNum == 18) {
					FileWriter fw;
					try {
						fw = new FileWriter(files18,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e18) {
						// TODO 自动生成的 catch 块
						e18.printStackTrace();
					}
				}
				if(intNum == 19) {
					FileWriter fw;
					try {
						fw = new FileWriter(files19,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e19) {
						// TODO 自动生成的 catch 块
						e19.printStackTrace();
					}
				}
				if(intNum == 20) {
					FileWriter fw;
					try {
						fw = new FileWriter(files20,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e20) {
						// TODO 自动生成的 catch 块
						e20.printStackTrace();
					}
				}
				if(intNum == 21) {
					FileWriter fw;
					try {
						fw = new FileWriter(files21,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e21) {
						// TODO 自动生成的 catch 块
						e21.printStackTrace();
					}
				}
				if(intNum == 22) {
					FileWriter fw;
					try {
						fw = new FileWriter(files22,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e22) {
						// TODO 自动生成的 catch 块
						e22.printStackTrace();
					}
				}
				if(intNum == 23) {
					FileWriter fw;
					try {
						fw = new FileWriter(files23,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e23) {
						// TODO 自动生成的 catch 块
						e23.printStackTrace();
					}
				}
				if(intNum == 24) {
					FileWriter fw;
					try {
						fw = new FileWriter(files24,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e24) {
						// TODO 自动生成的 catch 块
						e24.printStackTrace();
					}
				}
				if(intNum == 25) {
					FileWriter fw;
					try {
						fw = new FileWriter(files25,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e25) {
						// TODO 自动生成的 catch 块
						e25.printStackTrace();
					}
				}
				if(intNum == 26) {
					FileWriter fw;
					try {
						fw = new FileWriter(files26,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e26) {
						// TODO 自动生成的 catch 块
						e26.printStackTrace();
					}
				}
				if(intNum == 27) {
					FileWriter fw;
					try {
						fw = new FileWriter(files27,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e27) {
						// TODO 自动生成的 catch 块
						e27.printStackTrace();
					}
				}
				if(intNum == 28) {
					FileWriter fw;
					try {
						fw = new FileWriter(files28,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e28) {
						// TODO 自动生成的 catch 块
						e28.printStackTrace();
					}
				}
				if(intNum == 29) {
					FileWriter fw;
					try {
						fw = new FileWriter(files29,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e29) {
						// TODO 自动生成的 catch 块
						e29.printStackTrace();
					}
				}if(intNum == 30) {
					FileWriter fw;
					try {
						fw = new FileWriter(files30,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e30) {
						// TODO 自动生成的 catch 块
						e30.printStackTrace();
					}
				}
				
				//增加后清空数据
				NumTextField.setText("");
			}
		});
		
		// 创建container
		Container container = this.getContentPane();
		container.add(scrollPane);
		container.add(NumLable);
		container.add(NumTextField);
		container.add(SexLable);
		container.add(ComboBoxlist);
		container.add(AddBtn);
		// 设置布局管理器
		this.setLayout(null);
		/**
		 * 设置窗体属性
		 */
		this.setTitle("测试");
		this.setVisible(true);
		this.setSize(500, 500);
		this.setLocationRelativeTo(null);// 设置居中显示
		// 设置Jframe窗体关闭时 程序结束
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	@SuppressWarnings("unused")
	public static void main1(String[] args) throws IOException {
    	// TODO 自动生成的构造函数存根
		Ceshi frame=new Ceshi();
    }
}
________________________________________________________________________________________________________________________________________________________________________________
Kaoshi.java:
package chengxu;

import javax.swing.JButton;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.io.*;

public class Kaoshi extends JFrame {
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
	public static void main(String args[]) throws IOException {
		Kaoshi frame = new Kaoshi();
		frame.setVisible(true);
	}
 
	@SuppressWarnings({ "null", "unused", "resource" })
	public Kaoshi () throws IOException
	{
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
		Date date = new Date();//创建一个date对象保存当前时间
		String dateStr = simpleDateFormat.format(date);//format()方法将Date转换成指定格式的String
		/**
		 * 创建按钮和其他组件
		 */
		// 创建编号与编号输入框
		JLabel NumLable = new JLabel("编号：");
		JTextField NumTextField = new JTextField();
		NumLable.setBounds(30, 250, 40, 30);
		NumTextField.setBounds(72, 250, 65, 30);
		
		//创建得分与得分输入框
		JLabel SexLable = new JLabel("得分：");
		JTextField ComboBoxlist = new JTextField();
		SexLable.setBounds(260, 250, 40, 30);
		ComboBoxlist.setBounds(302, 250, 65, 30);
		
		//创建增加按钮
		JButton AddBtn = new JButton("确认");
		AddBtn.setBounds(35, 300, 65, 30);
		
		//创建IO
		File files01 = new File("人名单.txt");//创建文件对象
		File files02 = new File("性别单.txt");//创建文件对象
		File files1 = new File("1(5).txt");//创建文件对象
		File files2 = new File("2(5).txt");//创建文件对象
		File files3 = new File("3(5).txt");//创建文件对象
		File files4 = new File("4(5).txt");//创建文件对象
		File files5 = new File("5(5).txt");//创建文件对象
		File files6 = new File("6(5).txt");//创建文件对象
		File files7 = new File("7(5).txt");//创建文件对象
		File files8 = new File("8(5).txt");//创建文件对象
		File files9 = new File("9(5).txt");//创建文件对象
		File files10 = new File("10(5).txt");//创建文件对象
		File files11 = new File("11(5).txt");//创建文件对象
		File files12 = new File("12(5).txt");//创建文件对象
		File files13 = new File("13(5).txt");//创建文件对象
		File files14 = new File("14(5).txt");//创建文件对象
		File files15 = new File("15(5).txt");//创建文件对象
		File files16 = new File("16(5).txt");//创建文件对象
		File files17 = new File("17(5).txt");//创建文件对象
		File files18 = new File("18(5).txt");//创建文件对象
		File files19 = new File("19(5).txt");//创建文件对象
		File files20 = new File("20(5).txt");//创建文件对象
		File files21 = new File("21(5).txt");//创建文件对象
		File files22 = new File("22(5).txt");//创建文件对象
		File files23 = new File("23(5).txt");//创建文件对象
		File files24 = new File("24(5).txt");//创建文件对象
		File files25 = new File("25(5).txt");//创建文件对象
		File files26 = new File("26(5).txt");//创建文件对象
		File files27 = new File("27(5).txt");//创建文件对象
		File files28 = new File("28(5).txt");//创建文件对象
		File files29 = new File("29(5).txt");//创建文件对象
		File files30 = new File("30(5).txt");//创建文件对象
		
		FileReader fr1;
		fr1 = new FileReader(files01);
		char[] data1 = new char[99];			//定义char数组
		int length1 = 0;
		String str1 = null;
		while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
			String str = new String(data1,0,length1);//根据读取的内容创建String对象
			str1 = str;
		}
		String[] name = str1.split(";");//使用split根据；将字符串拆分成字符串数组
		
		FileReader fr2;
		fr2 = new FileReader(files02);
		char[] data2 = new char[99];			//定义char数组
		int length2 = 0;
		String str2 = null;
		while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
			String str = new String(data2,0,length2);//根据读取的内容创建String对象
			str2 = str;
		}
		String[] gender = str2.split(";");//使用split根据；将字符串拆分成字符串数组
		/**
		 * 创建数据容器
		 */
		// 创建表格内容的容器
		Object[][] context = new Object[][]{
			{"1",name[0],gender[0],dateStr},{"2",name[1],gender[1],dateStr},
			{"3",name[2],gender[2],dateStr},{"4",name[3],gender[3],dateStr},
			{"5",name[4],gender[4],dateStr},{"6",name[5],gender[5],dateStr},
			{"7",name[6],gender[6],dateStr},{"8",name[7],gender[7],dateStr},
			{"9",name[8],gender[8],dateStr},{"10",name[9],gender[9],dateStr},
			{"11",name[10],gender[10],dateStr},{"12",name[11],gender[11],dateStr},
			{"13",name[12],gender[12],dateStr},{"14",name[13],gender[13],dateStr},
			{"15",name[14],gender[14],dateStr},{"16",name[15],gender[15],dateStr},
			{"17",name[16],gender[16],dateStr},{"18",name[17],gender[17],dateStr},
			{"19",name[18],gender[18],dateStr},{"20",name[19],gender[19],dateStr},
			{"21",name[20],gender[20],dateStr},{"22",name[21],gender[21],dateStr},
			{"23",name[22],gender[22],dateStr},{"24",name[23],gender[23],dateStr},
			{"25",name[24],gender[24],dateStr},{"26",name[25],gender[25],dateStr},
			{"27",name[26],gender[26],dateStr},{"28",name[27],gender[27],dateStr},
			{"29",name[28],gender[28],dateStr},{"30",name[29],gender[29],dateStr},
		};
		
		// 创建表头的数据容器
		Object[] title = new Object[]{"编号","姓名","性别","时间"};
		// 创建DefaultTableMode模型 管理数据容器
		DefaultTableModel model = new DefaultTableModel(context, title);
		// 创建表格
		JTable table = new JTable(model);
		// 创建table滚动窗体
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBounds(30, 30, 440, 200);
		//定义表格每列宽度
		table.getColumn("编号").setPreferredWidth(5);
		table.getColumn("姓名").setPreferredWidth(5);
		table.getColumn("性别").setPreferredWidth(5);
		
		//创建监听器
		AddBtn.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String Num = NumTextField.getText();
				String defen = ComboBoxlist.getText();
				
				//将得分放入文档
				int intNum = Integer.parseInt(Num);//将Num类型由string转为int
				if(intNum == 1) {
					FileWriter fw;
					try {
						fw = new FileWriter(files1,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e1) {
						// TODO 自动生成的 catch 块
						e1.printStackTrace();
					}
				}
				if(intNum == 2) {
					FileWriter fw;
					try {
						fw = new FileWriter(files2,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e2) {
						// TODO 自动生成的 catch 块
						e2.printStackTrace();
					}
				}
				if(intNum == 3) {
					FileWriter fw;
					try {
						fw = new FileWriter(files3,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e3) {
						// TODO 自动生成的 catch 块
						e3.printStackTrace();
					}
				}
				if(intNum == 4) {
					FileWriter fw;
					try {
						fw = new FileWriter(files4,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e4) {
						// TODO 自动生成的 catch 块
						e4.printStackTrace();
					}
				}
				if(intNum == 5) {
					FileWriter fw;
					try {
						fw = new FileWriter(files5,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e5) {
						// TODO 自动生成的 catch 块
						e5.printStackTrace();
					}
				}
				if(intNum == 6) {
					FileWriter fw;
					try {
						fw = new FileWriter(files6,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e6) {
						// TODO 自动生成的 catch 块
						e6.printStackTrace();
					}
				}
				if(intNum == 7) {
					FileWriter fw;
					try {
						fw = new FileWriter(files7,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e7) {
						// TODO 自动生成的 catch 块
						e7.printStackTrace();
					}
				}
				if(intNum == 8) {
					FileWriter fw;
					try {
						fw = new FileWriter(files8,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e8) {
						// TODO 自动生成的 catch 块
						e8.printStackTrace();
					}
				}
				if(intNum == 9) {
					FileWriter fw;
					try {
						fw = new FileWriter(files9,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e9) {
						// TODO 自动生成的 catch 块
						e9.printStackTrace();
					}
				}
				if(intNum == 10) {
					FileWriter fw;
					try {
						fw = new FileWriter(files10,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e10) {
						// TODO 自动生成的 catch 块
						e10.printStackTrace();
					}
				}
				if(intNum == 11) {
					FileWriter fw;
					try {
						fw = new FileWriter(files11,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e11) {
						// TODO 自动生成的 catch 块
						e11.printStackTrace();
					}
				}
				if(intNum == 12) {
					FileWriter fw;
					try {
						fw = new FileWriter(files12,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e12) {
						// TODO 自动生成的 catch 块
						e12.printStackTrace();
					}
				}
				if(intNum == 13) {
					FileWriter fw;
					try {
						fw = new FileWriter(files13,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e13) {
						// TODO 自动生成的 catch 块
						e13.printStackTrace();
					}
				}
				if(intNum == 14) {
					FileWriter fw;
					try {
						fw = new FileWriter(files14,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e14) {
						// TODO 自动生成的 catch 块
						e14.printStackTrace();
					}
				}
				if(intNum == 15) {
					FileWriter fw;
					try {
						fw = new FileWriter(files15,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e15) {
						// TODO 自动生成的 catch 块
						e15.printStackTrace();
					}
				}
				if(intNum == 16) {
					FileWriter fw;
					try {
						fw = new FileWriter(files16,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e16) {
						// TODO 自动生成的 catch 块
						e16.printStackTrace();
					}
				}
				if(intNum == 17) {
					FileWriter fw;
					try {
						fw = new FileWriter(files17,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e17) {
						// TODO 自动生成的 catch 块
						e17.printStackTrace();
					}
				}
				if(intNum == 18) {
					FileWriter fw;
					try {
						fw = new FileWriter(files18,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e18) {
						// TODO 自动生成的 catch 块
						e18.printStackTrace();
					}
				}
				if(intNum == 19) {
					FileWriter fw;
					try {
						fw = new FileWriter(files19,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e19) {
						// TODO 自动生成的 catch 块
						e19.printStackTrace();
					}
				}
				if(intNum == 20) {
					FileWriter fw;
					try {
						fw = new FileWriter(files20,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e20) {
						// TODO 自动生成的 catch 块
						e20.printStackTrace();
					}
				}
				if(intNum == 21) {
					FileWriter fw;
					try {
						fw = new FileWriter(files21,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e21) {
						// TODO 自动生成的 catch 块
						e21.printStackTrace();
					}
				}
				if(intNum == 22) {
					FileWriter fw;
					try {
						fw = new FileWriter(files22,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e22) {
						// TODO 自动生成的 catch 块
						e22.printStackTrace();
					}
				}
				if(intNum == 23) {
					FileWriter fw;
					try {
						fw = new FileWriter(files23,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e23) {
						// TODO 自动生成的 catch 块
						e23.printStackTrace();
					}
				}
				if(intNum == 24) {
					FileWriter fw;
					try {
						fw = new FileWriter(files24,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e24) {
						// TODO 自动生成的 catch 块
						e24.printStackTrace();
					}
				}
				if(intNum == 25) {
					FileWriter fw;
					try {
						fw = new FileWriter(files25,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e25) {
						// TODO 自动生成的 catch 块
						e25.printStackTrace();
					}
				}
				if(intNum == 26) {
					FileWriter fw;
					try {
						fw = new FileWriter(files26,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e26) {
						// TODO 自动生成的 catch 块
						e26.printStackTrace();
					}
				}
				if(intNum == 27) {
					FileWriter fw;
					try {
						fw = new FileWriter(files27,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e27) {
						// TODO 自动生成的 catch 块
						e27.printStackTrace();
					}
				}
				if(intNum == 28) {
					FileWriter fw;
					try {
						fw = new FileWriter(files28,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e28) {
						// TODO 自动生成的 catch 块
						e28.printStackTrace();
					}
				}
				if(intNum == 29) {
					FileWriter fw;
					try {
						fw = new FileWriter(files29,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e29) {
						// TODO 自动生成的 catch 块
						e29.printStackTrace();
					}
				}if(intNum == 30) {
					FileWriter fw;
					try {
						fw = new FileWriter(files30,true);
						BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
						bw.write(defen);//写入数据
						bw.write(";");
						bw.flush(); // 刷新缓冲区
						fw.close();//关闭流
					} catch (IOException e30) {
						// TODO 自动生成的 catch 块
						e30.printStackTrace();
					}
				}
				
				//增加后清空数据
				NumTextField.setText("");
			}
		});
		
		// 创建container
		Container container = this.getContentPane();
		container.add(scrollPane);
		container.add(NumLable);
		container.add(NumTextField);
		container.add(SexLable);
		container.add(ComboBoxlist);
		container.add(AddBtn);
		// 设置布局管理器
		this.setLayout(null);
		/**
		 * 设置窗体属性
		 */
		this.setTitle("考试");
		this.setVisible(true);
		this.setSize(500, 500);
		this.setLocationRelativeTo(null);// 设置居中显示
		// 设置Jframe窗体关闭时 程序结束
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	@SuppressWarnings("unused")
	public static void main1(String[] args) throws IOException {
    	// TODO 自动生成的构造函数存根
		Kaoshi frame=new Kaoshi();
    }
}
_________________________________________________________________________________________________________________________________________________________________________________
Guanli.java:
package chengxu;

import java.awt.Container;
import javax.swing.JButton;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.io.*;

public class Guanli extends JFrame{
	private static final long serialVersionUID = 1L;//定义一个继承JFrame类的类
	double Dianmingfenshu;
	double Ketangfenshu;
	double Zuoyefenshu;
	double Ceshifenshu;
	double Kaoshifenshu;
	double Zongfenfenshu;
    public Guanli()
    {
    	this.setTitle("管理");
    	this.setSize(1200, 600);
    	this.setLocation(300, 400);
    	this.setVisible(true);
    	this.setLocationRelativeTo(null);// 设置居中显示
    	//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// 设置Jframe窗体关闭时 程序结束
    	this.setLayout(null);// 设置布局管理器
    	//创建权重变量
    	
		// 创建编号与编号输入框
		JLabel NumLable = new JLabel("编号：");
		JTextField NumTextField = new JTextField();
		NumLable.setBounds(30, 80, 40, 30);
		NumTextField.setBounds(72, 80, 65, 30);
		
		//创建权重与权重输入框
		JLabel SexLable = new JLabel("权重：(%)");
		SexLable.setBounds(300, 80, 65, 30);
		JLabel SexLable1 = new JLabel("点名：");
		JTextField ComboBoxlist1 = new JTextField();
		SexLable1.setBounds(380, 80, 40, 30);
		ComboBoxlist1.setBounds(420, 80, 65, 30);
		JLabel SexLable2 = new JLabel("课堂：");
		JTextField ComboBoxlist2 = new JTextField();
		SexLable2.setBounds(500, 80, 40, 30);
		ComboBoxlist2.setBounds(540, 80, 65, 30);
		JLabel SexLable3 = new JLabel("作业：");
		JTextField ComboBoxlist3 = new JTextField();
		SexLable3.setBounds(620, 80, 40, 30);
		ComboBoxlist3.setBounds(660, 80, 65, 30);
		JLabel SexLable4 = new JLabel("测试：");
		JTextField ComboBoxlist4 = new JTextField();
		SexLable4.setBounds(740, 80, 40, 30);
		ComboBoxlist4.setBounds(780, 80, 65, 30);
		JLabel SexLable5 = new JLabel("考试：");
		JTextField ComboBoxlist5 = new JTextField();
		SexLable5.setBounds(860, 80, 40, 30);
		ComboBoxlist5.setBounds(900, 80, 65, 30);
		
		JLabel Dianming = new JLabel("点名："+Dianmingfenshu);
		Dianming.setBounds(50,180,65,30);
		JLabel Ketang = new JLabel("课堂："+Ketangfenshu);
		Ketang.setBounds(150,180,65,30);
		JLabel Zuoye = new JLabel("作业："+Zuoyefenshu);
		Zuoye.setBounds(250,180,65,30);
		JLabel Ceshi = new JLabel("测试："+Ceshifenshu);
		Ceshi.setBounds(350,180,65,30);
		JLabel Kaoshi = new JLabel("考试："+Kaoshifenshu);
		Kaoshi.setBounds(450,180,65,30);
		JLabel Zongfen = new JLabel("总分："+Zongfenfenshu);
		Zongfen.setBounds(550,180,65,30);
		
		//创建增加按钮
		JButton AddBtn = new JButton("确认");
		AddBtn.setBounds(35, 130, 65, 30);
		
		//创建IO
		File files11 = new File("1(1).txt");//创建文件对象
		File files21 = new File("2(1).txt");//创建文件对象
		File files31 = new File("3(1).txt");//创建文件对象
		File files41 = new File("4(1).txt");//创建文件对象
		File files51 = new File("5(1).txt");//创建文件对象
		File files61 = new File("6(1).txt");//创建文件对象
		File files71 = new File("7(1).txt");//创建文件对象
		File files81 = new File("8(1).txt");//创建文件对象
		File files91 = new File("9(1).txt");//创建文件对象
		File files101 = new File("10(1).txt");//创建文件对象
		File files111 = new File("11(1).txt");//创建文件对象
		File files121 = new File("12(1).txt");//创建文件对象
		File files131 = new File("13(1).txt");//创建文件对象
		File files141 = new File("14(1).txt");//创建文件对象
		File files151 = new File("15(1).txt");//创建文件对象
		File files161 = new File("16(1).txt");//创建文件对象
		File files171 = new File("17(1).txt");//创建文件对象
		File files181 = new File("18(1).txt");//创建文件对象
		File files191 = new File("19(1).txt");//创建文件对象
		File files201 = new File("20(1).txt");//创建文件对象
		File files211 = new File("21(1).txt");//创建文件对象
		File files221 = new File("22(1).txt");//创建文件对象
		File files231 = new File("23(1).txt");//创建文件对象
		File files241 = new File("24(1).txt");//创建文件对象
		File files251 = new File("25(1).txt");//创建文件对象
		File files261 = new File("26(1).txt");//创建文件对象
		File files271 = new File("27(1).txt");//创建文件对象
		File files281 = new File("28(1).txt");//创建文件对象
		File files291 = new File("29(1).txt");//创建文件对象
		File files301 = new File("30(1).txt");//创建文件对象
		File files12 = new File("1(2).txt");//创建文件对象
		File files22 = new File("2(2).txt");//创建文件对象
		File files32 = new File("3(2).txt");//创建文件对象
		File files42 = new File("4(2).txt");//创建文件对象
		File files52 = new File("5(2).txt");//创建文件对象
		File files62 = new File("6(2).txt");//创建文件对象
		File files72 = new File("7(2).txt");//创建文件对象
		File files82 = new File("8(2).txt");//创建文件对象
		File files92 = new File("9(2).txt");//创建文件对象
		File files102 = new File("10(2).txt");//创建文件对象
		File files112 = new File("11(2).txt");//创建文件对象
		File files122 = new File("12(2).txt");//创建文件对象
		File files132 = new File("13(2).txt");//创建文件对象
		File files142 = new File("14(2).txt");//创建文件对象
		File files152 = new File("15(2).txt");//创建文件对象
		File files162 = new File("16(2).txt");//创建文件对象
		File files172 = new File("17(2).txt");//创建文件对象
		File files182 = new File("18(2).txt");//创建文件对象
		File files192 = new File("19(2).txt");//创建文件对象
		File files202 = new File("20(2).txt");//创建文件对象
		File files212 = new File("21(2).txt");//创建文件对象
		File files222 = new File("22(2).txt");//创建文件对象
		File files232 = new File("23(2).txt");//创建文件对象
		File files242 = new File("24(2).txt");//创建文件对象
		File files252 = new File("25(2).txt");//创建文件对象
		File files262 = new File("26(2).txt");//创建文件对象
		File files272 = new File("27(2).txt");//创建文件对象
		File files282 = new File("28(2).txt");//创建文件对象
		File files292 = new File("29(2).txt");//创建文件对象
		File files302 = new File("30(2).txt");//创建文件对象
		File files13 = new File("1(3).txt");//创建文件对象
		File files23 = new File("2(3).txt");//创建文件对象
		File files33 = new File("3(3).txt");//创建文件对象
		File files43 = new File("4(3).txt");//创建文件对象
		File files53 = new File("5(3).txt");//创建文件对象
		File files63 = new File("6(3).txt");//创建文件对象
		File files73 = new File("7(3).txt");//创建文件对象
		File files83 = new File("8(3).txt");//创建文件对象
		File files93 = new File("9(3).txt");//创建文件对象
		File files103 = new File("10(3).txt");//创建文件对象
		File files113 = new File("11(3).txt");//创建文件对象
		File files123 = new File("12(3).txt");//创建文件对象
		File files133 = new File("13(3).txt");//创建文件对象
		File files143 = new File("14(3).txt");//创建文件对象
		File files153 = new File("15(3).txt");//创建文件对象
		File files163 = new File("16(3).txt");//创建文件对象
		File files173 = new File("17(3).txt");//创建文件对象
		File files183 = new File("18(3).txt");//创建文件对象
		File files193 = new File("19(3).txt");//创建文件对象
		File files203 = new File("20(3).txt");//创建文件对象
		File files213 = new File("21(3).txt");//创建文件对象
		File files223 = new File("22(3).txt");//创建文件对象
		File files233 = new File("23(3).txt");//创建文件对象
		File files243 = new File("24(3).txt");//创建文件对象
		File files253 = new File("25(3).txt");//创建文件对象
		File files263 = new File("26(3).txt");//创建文件对象
		File files273 = new File("27(3).txt");//创建文件对象
		File files283 = new File("28(3).txt");//创建文件对象
		File files293 = new File("29(3).txt");//创建文件对象
		File files303 = new File("30(3).txt");//创建文件对象
		File files14 = new File("1(4).txt");//创建文件对象
		File files24 = new File("2(4).txt");//创建文件对象
		File files34 = new File("3(4).txt");//创建文件对象
		File files44 = new File("4(4).txt");//创建文件对象
		File files54 = new File("5(4).txt");//创建文件对象
		File files64 = new File("6(4).txt");//创建文件对象
		File files74 = new File("7(4).txt");//创建文件对象
		File files84 = new File("8(4).txt");//创建文件对象
		File files94 = new File("9(4).txt");//创建文件对象
		File files104 = new File("10(4).txt");//创建文件对象
		File files114 = new File("11(4).txt");//创建文件对象
		File files124 = new File("12(4).txt");//创建文件对象
		File files134 = new File("13(4).txt");//创建文件对象
		File files144 = new File("14(4).txt");//创建文件对象
		File files154 = new File("15(4).txt");//创建文件对象
		File files164 = new File("16(4).txt");//创建文件对象
		File files174 = new File("17(4).txt");//创建文件对象
		File files184 = new File("18(4).txt");//创建文件对象
		File files194 = new File("19(4).txt");//创建文件对象
		File files204 = new File("20(4).txt");//创建文件对象
		File files214 = new File("21(4).txt");//创建文件对象
		File files224 = new File("22(4).txt");//创建文件对象
		File files234 = new File("23(4).txt");//创建文件对象
		File files244 = new File("24(4).txt");//创建文件对象
		File files254 = new File("25(4).txt");//创建文件对象
		File files264 = new File("26(4).txt");//创建文件对象
		File files274 = new File("27(4).txt");//创建文件对象
		File files284 = new File("28(4).txt");//创建文件对象
		File files294 = new File("29(4).txt");//创建文件对象
		File files304 = new File("30(4).txt");//创建文件对象
		File files15 = new File("1(5).txt");//创建文件对象
		File files25 = new File("2(5).txt");//创建文件对象
		File files35 = new File("3(5).txt");//创建文件对象
		File files45 = new File("4(5).txt");//创建文件对象
		File files55 = new File("5(5).txt");//创建文件对象
		File files65 = new File("6(5).txt");//创建文件对象
		File files75 = new File("7(5).txt");//创建文件对象
		File files85 = new File("8(5).txt");//创建文件对象
		File files95 = new File("9(5).txt");//创建文件对象
		File files105 = new File("10(5).txt");//创建文件对象
		File files115 = new File("11(5).txt");//创建文件对象
		File files125 = new File("12(5).txt");//创建文件对象
		File files135 = new File("13(5).txt");//创建文件对象
		File files145 = new File("14(5).txt");//创建文件对象
		File files155 = new File("15(5).txt");//创建文件对象
		File files165 = new File("16(5).txt");//创建文件对象
		File files175 = new File("17(5).txt");//创建文件对象
		File files185 = new File("18(5).txt");//创建文件对象
		File files195 = new File("19(5).txt");//创建文件对象
		File files205 = new File("20(5).txt");//创建文件对象
		File files215 = new File("21(5).txt");//创建文件对象
		File files225 = new File("22(5).txt");//创建文件对象
		File files235 = new File("23(5).txt");//创建文件对象
		File files245 = new File("24(5).txt");//创建文件对象
		File files255 = new File("25(5).txt");//创建文件对象
		File files265 = new File("26(5).txt");//创建文件对象
		File files275 = new File("27(5).txt");//创建文件对象
		File files285 = new File("28(5).txt");//创建文件对象
		File files295 = new File("29(5).txt");//创建文件对象
		File files305 = new File("30(5).txt");//创建文件对象
		
        JButton button1 = new JButton("建立储存文档（只能点一次，点多了就找管理员吧）");
        button1.setBounds(30, 30, 320, 30);
        button1.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent arg0) {
        		File files01 = new File("人名单.txt");//创建文件对象
            	if(files01.exists()) {//检测是否存在文件
            		System.out.println("存在文件人名单");
            	}
            	else {
                	try {
        				files01.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	for(int i=1;i<30;i=i+1) {
            		FileWriter fw;
    				try {
    					fw = new FileWriter(files01,true);
    					BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
    					bw.write(";");
    					bw.flush(); // 刷新缓冲区
    					fw.close();//关闭流
    				} catch (IOException e1) {
    					// TODO 自动生成的 catch 块
    					e1.printStackTrace();
    				}
    			}
            	File files02 = new File("性别单.txt");//创建文件对象
            	if(files02.exists()) {//检测是否存在文件
            		System.out.println("存在文件性别单");
            	}
            	else {
                	try {
        				files02.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	for(int i=1;i<30;i=i+1) {
            		FileWriter fw;
    				try {
    					fw = new FileWriter(files02,true);
    					BufferedWriter bw = new BufferedWriter(fw); // 使用缓冲区数据流封装输出流
    					bw.write(";");
    					bw.flush(); // 刷新缓冲区
    					fw.close();//关闭流
    				} catch (IOException e1) {
    					// TODO 自动生成的 catch 块
    					e1.printStackTrace();
    				}
    			}
            	File files11 = new File("1(1).txt");//创建文件对象
            	if(files11.exists()) {//检测是否存在文件
            		System.out.println("存在文件1(1)");
            	}
            	else {
                	try {
        				files11.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files21 = new File("2(1).txt");//创建文件对象
            	if(files21.exists()) {//检测是否存在文件
            		System.out.println("存在文件2(1)");
            	}
            	else {
                	try {
        				files21.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files31 = new File("3(1).txt");//创建文件对象
            	if(files31.exists()) {//检测是否存在文件
            		System.out.println("存在文件3(1)");
            	}
            	else {
                	try {
        				files31.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files41 = new File("4(1).txt");//创建文件对象
            	if(files41.exists()) {//检测是否存在文件
            		System.out.println("存在文件4(1)");
            	}
            	else {
                	try {
        				files41.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files51 = new File("5(1).txt");//创建文件对象
            	if(files51.exists()) {//检测是否存在文件
            		System.out.println("存在文件5(1)");
            	}
            	else {
                	try {
        				files51.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files61 = new File("6(1).txt");//创建文件对象
            	if(files61.exists()) {//检测是否存在文件
            		System.out.println("存在文件6(1)");
            	}
            	else {
                	try {
        				files61.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files71 = new File("7(1).txt");//创建文件对象
            	if(files71.exists()) {//检测是否存在文件
            		System.out.println("存在文件7(1)");
            	}
            	else {
                	try {
        				files71.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files81 = new File("8(1).txt");//创建文件对象
            	if(files81.exists()) {//检测是否存在文件
            		System.out.println("存在文件8(1)");
            	}
            	else {
                	try {
        				files81.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files91 = new File("9(1).txt");//创建文件对象
            	if(files91.exists()) {//检测是否存在文件
            		System.out.println("存在文件9(1)");
            	}
            	else {
                	try {
        				files91.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files101 = new File("10(1).txt");//创建文件对象
            	if(files101.exists()) {//检测是否存在文件
            		System.out.println("存在文件10(1)");
            	}
            	else {
                	try {
        				files101.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files111 = new File("11(1).txt");//创建文件对象
            	if(files111.exists()) {//检测是否存在文件
            		System.out.println("存在文件11(1)");
            	}
            	else {
                	try {
        				files111.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files121 = new File("12(1).txt");//创建文件对象
            	if(files121.exists()) {//检测是否存在文件
            		System.out.println("存在文件12(1)");
            	}
            	else {
                	try {
        				files121.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files131 = new File("13(1).txt");//创建文件对象
            	if(files131.exists()) {//检测是否存在文件
            		System.out.println("存在文件13(1)");
            	}
            	else {
                	try {
        				files131.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files141 = new File("14(1).txt");//创建文件对象
            	if(files141.exists()) {//检测是否存在文件
            		System.out.println("存在文件14(1)");
            	}
            	else {
                	try {
        				files141.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files151 = new File("15(1).txt");//创建文件对象
            	if(files151.exists()) {//检测是否存在文件
            		System.out.println("存在文件15(1)");
            	}
            	else {
                	try {
        				files151.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files161 = new File("16(1).txt");//创建文件对象
            	if(files161.exists()) {//检测是否存在文件
            		System.out.println("存在文件16(1)");
            	}
            	else {
                	try {
        				files161.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files171 = new File("17(1).txt");//创建文件对象
            	if(files171.exists()) {//检测是否存在文件
            		System.out.println("存在文件17(1)");
            	}
            	else {
                	try {
        				files171.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files181 = new File("18(1).txt");//创建文件对象
            	if(files181.exists()) {//检测是否存在文件
            		System.out.println("存在文件18(1)");
            	}
            	else {
                	try {
        				files181.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files191 = new File("19(1).txt");//创建文件对象
            	if(files191.exists()) {//检测是否存在文件
            		System.out.println("存在文件19(1)");
            	}
            	else {
                	try {
        				files191.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files201 = new File("20(1).txt");//创建文件对象
            	if(files201.exists()) {//检测是否存在文件
            		System.out.println("存在文件20(1)");
            	}
            	else {
                	try {
        				files201.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files211 = new File("21(1).txt");//创建文件对象
            	if(files211.exists()) {//检测是否存在文件
            		System.out.println("存在文件21(1)");
            	}
            	else {
                	try {
        				files211.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files221 = new File("22(1).txt");//创建文件对象
            	if(files221.exists()) {//检测是否存在文件
            		System.out.println("存在文件22(1)");
            	}
            	else {
                	try {
        				files221.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files231 = new File("23(1).txt");//创建文件对象
            	if(files231.exists()) {//检测是否存在文件
            		System.out.println("存在文件23(1)");
            	}
            	else {
                	try {
        				files231.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files241 = new File("24(1).txt");//创建文件对象
            	if(files241.exists()) {//检测是否存在文件
            		System.out.println("存在文件24(1)");
            	}
            	else {
                	try {
        				files241.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files251 = new File("25(1).txt");//创建文件对象
            	if(files251.exists()) {//检测是否存在文件
            		System.out.println("存在文件25(1)");
            	}
            	else {
                	try {
        				files251.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files261 = new File("26(1).txt");//创建文件对象
            	if(files261.exists()) {//检测是否存在文件
            		System.out.println("存在文件26(1)");
            	}
            	else {
                	try {
        				files261.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files271 = new File("27(1).txt");//创建文件对象
            	if(files271.exists()) {//检测是否存在文件
            		System.out.println("存在文件27(1)");
            	}
            	else {
                	try {
        				files271.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files281 = new File("28(1).txt");//创建文件对象
            	if(files281.exists()) {//检测是否存在文件
            		System.out.println("存在文件28(1)");
            	}
            	else {
                	try {
        				files281.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files291 = new File("29(1).txt");//创建文件对象
            	if(files291.exists()) {//检测是否存在文件
            		System.out.println("存在文件29(1)");
            	}
            	else {
                	try {
        				files291.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files301 = new File("30(1).txt");//创建文件对象
            	if(files301.exists()) {//检测是否存在文件
            		System.out.println("存在文件30(1)");
            	}
            	else {
                	try {
        				files301.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files12 = new File("1(2).txt");//创建文件对象
            	if(files12.exists()) {//检测是否存在文件
            		System.out.println("存在文件1(2)");
            	}
            	else {
                	try {
        				files12.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files22 = new File("2(2).txt");//创建文件对象
            	if(files22.exists()) {//检测是否存在文件
            		System.out.println("存在文件2(2)");
            	}
            	else {
                	try {
        				files22.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files32 = new File("3(2).txt");//创建文件对象
            	if(files32.exists()) {//检测是否存在文件
            		System.out.println("存在文件3(2)");
            	}
            	else {
                	try {
        				files32.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files42 = new File("4(2).txt");//创建文件对象
            	if(files42.exists()) {//检测是否存在文件
            		System.out.println("存在文件4(2)");
            	}
            	else {
                	try {
        				files42.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files52 = new File("5(2).txt");//创建文件对象
            	if(files52.exists()) {//检测是否存在文件
            		System.out.println("存在文件5(2)");
            	}
            	else {
                	try {
        				files52.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files62 = new File("6(2).txt");//创建文件对象
            	if(files62.exists()) {//检测是否存在文件
            		System.out.println("存在文件6(2)");
            	}
            	else {
                	try {
        				files62.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files72 = new File("7(2).txt");//创建文件对象
            	if(files72.exists()) {//检测是否存在文件
            		System.out.println("存在文件7(2)");
            	}
            	else {
                	try {
        				files72.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files82 = new File("8(2).txt");//创建文件对象
            	if(files82.exists()) {//检测是否存在文件
            		System.out.println("存在文件8(2)");
            	}
            	else {
                	try {
        				files82.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files92 = new File("9(2).txt");//创建文件对象
            	if(files92.exists()) {//检测是否存在文件
            		System.out.println("存在文件9(2)");
            	}
            	else {
                	try {
        				files92.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files102 = new File("10(2).txt");//创建文件对象
            	if(files102.exists()) {//检测是否存在文件
            		System.out.println("存在文件10(2)");
            	}
            	else {
                	try {
        				files102.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files112 = new File("11(2).txt");//创建文件对象
            	if(files112.exists()) {//检测是否存在文件
            		System.out.println("存在文件11(2)");
            	}
            	else {
                	try {
        				files112.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files122 = new File("12(2).txt");//创建文件对象
            	if(files122.exists()) {//检测是否存在文件
            		System.out.println("存在文件12(2)");
            	}
            	else {
                	try {
        				files122.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files132 = new File("13(2).txt");//创建文件对象
            	if(files132.exists()) {//检测是否存在文件
            		System.out.println("存在文件13(2)");
            	}
            	else {
                	try {
        				files132.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files142 = new File("14(2).txt");//创建文件对象
            	if(files142.exists()) {//检测是否存在文件
            		System.out.println("存在文件14(2)");
            	}
            	else {
                	try {
        				files142.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files152 = new File("15(2).txt");//创建文件对象
            	if(files152.exists()) {//检测是否存在文件
            		System.out.println("存在文件15(2)");
            	}
            	else {
                	try {
        				files152.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files162 = new File("16(2).txt");//创建文件对象
            	if(files162.exists()) {//检测是否存在文件
            		System.out.println("存在文件16(2)");
            	}
            	else {
                	try {
        				files162.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files172 = new File("17(2).txt");//创建文件对象
            	if(files172.exists()) {//检测是否存在文件
            		System.out.println("存在文件17(2)");
            	}
            	else {
                	try {
        				files172.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files182 = new File("18(2).txt");//创建文件对象
            	if(files182.exists()) {//检测是否存在文件
            		System.out.println("存在文件18(2)");
            	}
            	else {
                	try {
        				files182.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files192 = new File("19(2).txt");//创建文件对象
            	if(files192.exists()) {//检测是否存在文件
            		System.out.println("存在文件19(2)");
            	}
            	else {
                	try {
        				files192.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files202 = new File("20(2).txt");//创建文件对象
            	if(files202.exists()) {//检测是否存在文件
            		System.out.println("存在文件20(2)");
            	}
            	else {
                	try {
        				files202.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files212 = new File("21(2).txt");//创建文件对象
            	if(files212.exists()) {//检测是否存在文件
            		System.out.println("存在文件21(2)");
            	}
            	else {
                	try {
        				files212.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files222 = new File("22(2).txt");//创建文件对象
            	if(files222.exists()) {//检测是否存在文件
            		System.out.println("存在文件22(2)");
            	}
            	else {
                	try {
        				files222.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files232 = new File("23(2).txt");//创建文件对象
            	if(files232.exists()) {//检测是否存在文件
            		System.out.println("存在文件23(2)");
            	}
            	else {
                	try {
        				files232.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files242 = new File("24(2).txt");//创建文件对象
            	if(files242.exists()) {//检测是否存在文件
            		System.out.println("存在文件24(2)");
            	}
            	else {
                	try {
        				files242.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files252 = new File("25(2).txt");//创建文件对象
            	if(files252.exists()) {//检测是否存在文件
            		System.out.println("存在文件25(2)");
            	}
            	else {
                	try {
        				files252.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files262 = new File("26(2).txt");//创建文件对象
            	if(files262.exists()) {//检测是否存在文件
            		System.out.println("存在文件26(2)");
            	}
            	else {
                	try {
        				files262.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files272 = new File("27(2).txt");//创建文件对象
            	if(files272.exists()) {//检测是否存在文件
            		System.out.println("存在文件27(2)");
            	}
            	else {
                	try {
        				files272.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files282 = new File("28(2).txt");//创建文件对象
            	if(files282.exists()) {//检测是否存在文件
            		System.out.println("存在文件28(2)");
            	}
            	else {
                	try {
        				files282.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files292 = new File("29(2).txt");//创建文件对象
            	if(files292.exists()) {//检测是否存在文件
            		System.out.println("存在文件29(2)");
            	}
            	else {
                	try {
        				files292.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files302 = new File("30(2).txt");//创建文件对象
            	if(files302.exists()) {//检测是否存在文件
            		System.out.println("存在文件30(2)");
            	}
            	else {
                	try {
        				files302.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files13 = new File("1(3).txt");//创建文件对象
            	if(files13.exists()) {//检测是否存在文件
            		System.out.println("存在文件1(3)");
            	}
            	else {
                	try {
        				files13.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files23 = new File("2(3).txt");//创建文件对象
            	if(files23.exists()) {//检测是否存在文件
            		System.out.println("存在文件2(3)");
            	}
            	else {
                	try {
        				files23.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files33 = new File("3(3).txt");//创建文件对象
            	if(files33.exists()) {//检测是否存在文件
            		System.out.println("存在文件3(3)");
            	}
            	else {
                	try {
        				files33.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files43 = new File("4(3).txt");//创建文件对象
            	if(files43.exists()) {//检测是否存在文件
            		System.out.println("存在文件4(3)");
            	}
            	else {
                	try {
        				files43.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files53 = new File("5(3).txt");//创建文件对象
            	if(files53.exists()) {//检测是否存在文件
            		System.out.println("存在文件5(3)");
            	}
            	else {
                	try {
        				files53.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files63 = new File("6(3).txt");//创建文件对象
            	if(files63.exists()) {//检测是否存在文件
            		System.out.println("存在文件6(3)");
            	}
            	else {
                	try {
        				files63.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files73 = new File("7(3).txt");//创建文件对象
            	if(files73.exists()) {//检测是否存在文件
            		System.out.println("存在文件7(3)");
            	}
            	else {
                	try {
        				files73.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files83 = new File("8(3).txt");//创建文件对象
            	if(files83.exists()) {//检测是否存在文件
            		System.out.println("存在文件8(3)");
            	}
            	else {
                	try {
        				files83.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files93 = new File("9(3).txt");//创建文件对象
            	if(files93.exists()) {//检测是否存在文件
            		System.out.println("存在文件9(3)");
            	}
            	else {
                	try {
        				files93.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files103 = new File("10(3).txt");//创建文件对象
            	if(files103.exists()) {//检测是否存在文件
            		System.out.println("存在文件10(3)");
            	}
            	else {
                	try {
        				files103.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files113 = new File("11(3).txt");//创建文件对象
            	if(files113.exists()) {//检测是否存在文件
            		System.out.println("存在文件11(3)");
            	}
            	else {
                	try {
        				files113.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files123 = new File("12(3).txt");//创建文件对象
            	if(files123.exists()) {//检测是否存在文件
            		System.out.println("存在文件12(3)");
            	}
            	else {
                	try {
        				files123.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files133 = new File("13(3).txt");//创建文件对象
            	if(files133.exists()) {//检测是否存在文件
            		System.out.println("存在文件13(3)");
            	}
            	else {
                	try {
        				files133.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files143 = new File("14(3).txt");//创建文件对象
            	if(files143.exists()) {//检测是否存在文件
            		System.out.println("存在文件14(3)");
            	}
            	else {
                	try {
        				files143.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files153 = new File("15(3).txt");//创建文件对象
            	if(files153.exists()) {//检测是否存在文件
            		System.out.println("存在文件15(3)");
            	}
            	else {
                	try {
        				files153.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files163 = new File("16(3).txt");//创建文件对象
            	if(files163.exists()) {//检测是否存在文件
            		System.out.println("存在文件16(3)");
            	}
            	else {
                	try {
        				files163.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files173 = new File("17(3).txt");//创建文件对象
            	if(files173.exists()) {//检测是否存在文件
            		System.out.println("存在文件17(3)");
            	}
            	else {
                	try {
        				files173.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files183 = new File("18(3).txt");//创建文件对象
            	if(files183.exists()) {//检测是否存在文件
            		System.out.println("存在文件18(3)");
            	}
            	else {
                	try {
        				files183.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files193 = new File("19(3).txt");//创建文件对象
            	if(files193.exists()) {//检测是否存在文件
            		System.out.println("存在文件19(3)");
            	}
            	else {
                	try {
        				files193.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files203 = new File("20(3).txt");//创建文件对象
            	if(files203.exists()) {//检测是否存在文件
            		System.out.println("存在文件20(3)");
            	}
            	else {
                	try {
        				files203.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files213 = new File("21(3).txt");//创建文件对象
            	if(files213.exists()) {//检测是否存在文件
            		System.out.println("存在文件21(3)");
            	}
            	else {
                	try {
        				files213.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files223 = new File("22(3).txt");//创建文件对象
            	if(files223.exists()) {//检测是否存在文件
            		System.out.println("存在文件22(3)");
            	}
            	else {
                	try {
        				files223.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files233 = new File("23(3).txt");//创建文件对象
            	if(files233.exists()) {//检测是否存在文件
            		System.out.println("存在文件23(3)");
            	}
            	else {
                	try {
        				files233.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files243 = new File("24(3).txt");//创建文件对象
            	if(files243.exists()) {//检测是否存在文件
            		System.out.println("存在文件24(3)");
            	}
            	else {
                	try {
        				files243.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files253 = new File("25(3).txt");//创建文件对象
            	if(files253.exists()) {//检测是否存在文件
            		System.out.println("存在文件25(3)");
            	}
            	else {
                	try {
        				files253.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files263 = new File("26(3).txt");//创建文件对象
            	if(files263.exists()) {//检测是否存在文件
            		System.out.println("存在文件26(3)");
            	}
            	else {
                	try {
        				files263.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files273 = new File("27(3).txt");//创建文件对象
            	if(files273.exists()) {//检测是否存在文件
            		System.out.println("存在文件27(3)");
            	}
            	else {
                	try {
        				files273.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files283 = new File("28(3).txt");//创建文件对象
            	if(files283.exists()) {//检测是否存在文件
            		System.out.println("存在文件28(3)");
            	}
            	else {
                	try {
        				files283.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files293 = new File("29(3).txt");//创建文件对象
            	if(files293.exists()) {//检测是否存在文件
            		System.out.println("存在文件29(3)");
            	}
            	else {
                	try {
        				files293.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files303 = new File("30(3).txt");//创建文件对象
            	if(files303.exists()) {//检测是否存在文件
            		System.out.println("存在文件30(3)");
            	}
            	else {
                	try {
        				files303.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files14 = new File("1(4).txt");//创建文件对象
            	if(files14.exists()) {//检测是否存在文件
            		System.out.println("存在文件1(4)");
            	}
            	else {
                	try {
        				files14.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files24 = new File("2(4).txt");//创建文件对象
            	if(files24.exists()) {//检测是否存在文件
            		System.out.println("存在文件2(4)");
            	}
            	else {
                	try {
        				files24.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files34 = new File("3(4).txt");//创建文件对象
            	if(files34.exists()) {//检测是否存在文件
            		System.out.println("存在文件3(4)");
            	}
            	else {
                	try {
        				files34.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files44 = new File("4(4).txt");//创建文件对象
            	if(files44.exists()) {//检测是否存在文件
            		System.out.println("存在文件4(4)");
            	}
            	else {
                	try {
        				files44.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files54 = new File("5(4).txt");//创建文件对象
            	if(files54.exists()) {//检测是否存在文件
            		System.out.println("存在文件5(4)");
            	}
            	else {
                	try {
        				files54.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files64 = new File("6(4).txt");//创建文件对象
            	if(files64.exists()) {//检测是否存在文件
            		System.out.println("存在文件6(4)");
            	}
            	else {
                	try {
        				files64.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files74 = new File("7(4).txt");//创建文件对象
            	if(files74.exists()) {//检测是否存在文件
            		System.out.println("存在文件7(4)");
            	}
            	else {
                	try {
        				files74.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files84 = new File("8(4).txt");//创建文件对象
            	if(files84.exists()) {//检测是否存在文件
            		System.out.println("存在文件8(4)");
            	}
            	else {
                	try {
        				files84.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files94 = new File("9(4).txt");//创建文件对象
            	if(files94.exists()) {//检测是否存在文件
            		System.out.println("存在文件9(4)");
            	}
            	else {
                	try {
        				files94.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files104 = new File("10(4).txt");//创建文件对象
            	if(files104.exists()) {//检测是否存在文件
            		System.out.println("存在文件10(4)");
            	}
            	else {
                	try {
        				files104.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files114 = new File("11(4).txt");//创建文件对象
            	if(files114.exists()) {//检测是否存在文件
            		System.out.println("存在文件11(4)");
            	}
            	else {
                	try {
        				files114.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files124 = new File("12(4).txt");//创建文件对象
            	if(files124.exists()) {//检测是否存在文件
            		System.out.println("存在文件12(4)");
            	}
            	else {
                	try {
        				files124.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files134 = new File("13(4).txt");//创建文件对象
            	if(files134.exists()) {//检测是否存在文件
            		System.out.println("存在文件13(4)");
            	}
            	else {
                	try {
        				files134.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files144 = new File("14(4).txt");//创建文件对象
            	if(files144.exists()) {//检测是否存在文件
            		System.out.println("存在文件14(4)");
            	}
            	else {
                	try {
        				files144.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files154 = new File("15(4).txt");//创建文件对象
            	if(files154.exists()) {//检测是否存在文件
            		System.out.println("存在文件15(4)");
            	}
            	else {
                	try {
        				files154.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files164 = new File("16(4).txt");//创建文件对象
            	if(files164.exists()) {//检测是否存在文件
            		System.out.println("存在文件16(4)");
            	}
            	else {
                	try {
        				files164.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files174 = new File("17(4).txt");//创建文件对象
            	if(files174.exists()) {//检测是否存在文件
            		System.out.println("存在文件17(4)");
            	}
            	else {
                	try {
        				files174.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files184 = new File("18(4).txt");//创建文件对象
            	if(files184.exists()) {//检测是否存在文件
            		System.out.println("存在文件18(4)");
            	}
            	else {
                	try {
        				files184.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files194 = new File("19(4).txt");//创建文件对象
            	if(files194.exists()) {//检测是否存在文件
            		System.out.println("存在文件19(4)");
            	}
            	else {
                	try {
        				files194.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files204 = new File("20(4).txt");//创建文件对象
            	if(files204.exists()) {//检测是否存在文件
            		System.out.println("存在文件20(4)");
            	}
            	else {
                	try {
        				files204.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files214 = new File("21(4).txt");//创建文件对象
            	if(files214.exists()) {//检测是否存在文件
            		System.out.println("存在文件21(4)");
            	}
            	else {
                	try {
        				files214.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files224 = new File("22(4).txt");//创建文件对象
            	if(files224.exists()) {//检测是否存在文件
            		System.out.println("存在文件22(4)");
            	}
            	else {
                	try {
        				files224.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files234 = new File("23(4).txt");//创建文件对象
            	if(files234.exists()) {//检测是否存在文件
            		System.out.println("存在文件23(4)");
            	}
            	else {
                	try {
        				files234.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files244 = new File("24(4).txt");//创建文件对象
            	if(files244.exists()) {//检测是否存在文件
            		System.out.println("存在文件24(4)");
            	}
            	else {
                	try {
        				files244.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files254 = new File("25(4).txt");//创建文件对象
            	if(files254.exists()) {//检测是否存在文件
            		System.out.println("存在文件25(4)");
            	}
            	else {
                	try {
        				files254.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files264 = new File("26(4).txt");//创建文件对象
            	if(files264.exists()) {//检测是否存在文件
            		System.out.println("存在文件26(4)");
            	}
            	else {
                	try {
        				files264.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files274 = new File("27(4).txt");//创建文件对象
            	if(files274.exists()) {//检测是否存在文件
            		System.out.println("存在文件27(4)");
            	}
            	else {
                	try {
        				files274.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files284 = new File("28(4).txt");//创建文件对象
            	if(files284.exists()) {//检测是否存在文件
            		System.out.println("存在文件28(4)");
            	}
            	else {
                	try {
        				files284.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files294 = new File("29(4).txt");//创建文件对象
            	if(files294.exists()) {//检测是否存在文件
            		System.out.println("存在文件29(4)");
            	}
            	else {
                	try {
        				files294.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files304 = new File("30(4).txt");//创建文件对象
            	if(files304.exists()) {//检测是否存在文件
            		System.out.println("存在文件30(4)");
            	}
            	else {
                	try {
        				files304.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files15 = new File("1(5).txt");//创建文件对象
            	if(files15.exists()) {//检测是否存在文件
            		System.out.println("存在文件1(5)");
            	}
            	else {
                	try {
        				files15.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files25 = new File("2(5).txt");//创建文件对象
            	if(files25.exists()) {//检测是否存在文件
            		System.out.println("存在文件2(5)");
            	}
            	else {
                	try {
        				files25.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files35 = new File("3(5).txt");//创建文件对象
            	if(files35.exists()) {//检测是否存在文件
            		System.out.println("存在文件3(5)");
            	}
            	else {
                	try {
        				files35.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files45 = new File("4(5).txt");//创建文件对象
            	if(files45.exists()) {//检测是否存在文件
            		System.out.println("存在文件4(5)");
            	}
            	else {
                	try {
        				files45.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files55 = new File("5(5).txt");//创建文件对象
            	if(files55.exists()) {//检测是否存在文件
            		System.out.println("存在文件5(5)");
            	}
            	else {
                	try {
        				files55.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files65 = new File("6(5).txt");//创建文件对象
            	if(files65.exists()) {//检测是否存在文件
            		System.out.println("存在文件6(5)");
            	}
            	else {
                	try {
        				files65.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files75 = new File("7(5).txt");//创建文件对象
            	if(files75.exists()) {//检测是否存在文件
            		System.out.println("存在文件7(5)");
            	}
            	else {
                	try {
        				files75.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files85 = new File("8(5).txt");//创建文件对象
            	if(files85.exists()) {//检测是否存在文件
            		System.out.println("存在文件8(5)");
            	}
            	else {
                	try {
        				files85.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files95 = new File("9(5).txt");//创建文件对象
            	if(files95.exists()) {//检测是否存在文件
            		System.out.println("存在文件9(5)");
            	}
            	else {
                	try {
        				files95.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files105 = new File("10(5).txt");//创建文件对象
            	if(files105.exists()) {//检测是否存在文件
            		System.out.println("存在文件10(5)");
            	}
            	else {
                	try {
        				files105.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files115 = new File("11(5).txt");//创建文件对象
            	if(files115.exists()) {//检测是否存在文件
            		System.out.println("存在文件11(5)");
            	}
            	else {
                	try {
        				files115.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files125 = new File("12(5).txt");//创建文件对象
            	if(files125.exists()) {//检测是否存在文件
            		System.out.println("存在文件12(5)");
            	}
            	else {
                	try {
        				files125.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files135 = new File("13(5).txt");//创建文件对象
            	if(files135.exists()) {//检测是否存在文件
            		System.out.println("存在文件13(5)");
            	}
            	else {
                	try {
        				files135.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files145 = new File("14(5).txt");//创建文件对象
            	if(files145.exists()) {//检测是否存在文件
            		System.out.println("存在文件14(5)");
            	}
            	else {
                	try {
        				files145.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files155 = new File("15(5).txt");//创建文件对象
            	if(files155.exists()) {//检测是否存在文件
            		System.out.println("存在文件15(5)");
            	}
            	else {
                	try {
        				files155.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files165 = new File("16(5).txt");//创建文件对象
            	if(files165.exists()) {//检测是否存在文件
            		System.out.println("存在文件16(5)");
            	}
            	else {
                	try {
        				files165.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files175 = new File("17(5).txt");//创建文件对象
            	if(files175.exists()) {//检测是否存在文件
            		System.out.println("存在文件17(5)");
            	}
            	else {
                	try {
        				files175.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files185 = new File("18(5).txt");//创建文件对象
            	if(files185.exists()) {//检测是否存在文件
            		System.out.println("存在文件18(5)");
            	}
            	else {
                	try {
        				files185.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files195 = new File("19(5).txt");//创建文件对象
            	if(files195.exists()) {//检测是否存在文件
            		System.out.println("存在文件19(5)");
            	}
            	else {
                	try {
        				files195.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files205 = new File("20(5).txt");//创建文件对象
            	if(files205.exists()) {//检测是否存在文件
            		System.out.println("存在文件20(5)");
            	}
            	else {
                	try {
        				files205.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files215 = new File("21(5).txt");//创建文件对象
            	if(files215.exists()) {//检测是否存在文件
            		System.out.println("存在文件21(5)");
            	}
            	else {
                	try {
        				files215.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files225 = new File("22(5).txt");//创建文件对象
            	if(files225.exists()) {//检测是否存在文件
            		System.out.println("存在文件22(5)");
            	}
            	else {
                	try {
        				files225.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files235 = new File("23(5).txt");//创建文件对象
            	if(files235.exists()) {//检测是否存在文件
            		System.out.println("存在文件23(5)");
            	}
            	else {
                	try {
        				files235.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files245 = new File("24(5).txt");//创建文件对象
            	if(files245.exists()) {//检测是否存在文件
            		System.out.println("存在文件24(5)");
            	}
            	else {
                	try {
        				files245.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files255 = new File("25(5).txt");//创建文件对象
            	if(files255.exists()) {//检测是否存在文件
            		System.out.println("存在文件25(5)");
            	}
            	else {
                	try {
        				files255.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files265 = new File("26(5).txt");//创建文件对象
            	if(files265.exists()) {//检测是否存在文件
            		System.out.println("存在文件26(5)");
            	}
            	else {
                	try {
        				files265.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files275 = new File("27(5).txt");//创建文件对象
            	if(files275.exists()) {//检测是否存在文件
            		System.out.println("存在文件27(5)");
            	}
            	else {
                	try {
        				files275.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files285 = new File("28(5).txt");//创建文件对象
            	if(files285.exists()) {//检测是否存在文件
            		System.out.println("存在文件28(5)");
            	}
            	else {
                	try {
        				files285.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files295 = new File("29(5).txt");//创建文件对象
            	if(files295.exists()) {//检测是否存在文件
            		System.out.println("存在文件29(5)");
            	}
            	else {
                	try {
        				files295.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
            	File files305 = new File("30(5).txt");//创建文件对象
            	if(files305.exists()) {//检测是否存在文件
            		System.out.println("存在文件30(5)");
            	}
            	else {
                	try {
        				files305.createNewFile();//创建文件
        			} catch (IOException e) {
        				// TODO 自动生成的 catch 块
        				e.printStackTrace();
        				JOptionPane.showMessageDialog(null, "创造文件错误", "错误",
        						JOptionPane.ERROR_MESSAGE);
        			}
            	}
        	}
        });
        this.add(button1);
      //创建监听器
      		AddBtn.addActionListener(new ActionListener() {
      			
      			@Override
      			public void actionPerformed(ActionEvent e) {
    				
    				String Numanniu = NumTextField.getText();
    				String Dianminganniu = ComboBoxlist1.getText();
    				String Ketanganniu = ComboBoxlist2.getText();
    				String Zuoyeanniu = ComboBoxlist3.getText();
    				String Ceshianniu = ComboBoxlist4.getText();
    				String Kaoshianniu = ComboBoxlist5.getText();
    				
    				int Dianmingquanzhong = Integer.valueOf(Dianminganniu).intValue();
    				int Ketangquanzhong = Integer.valueOf(Ketanganniu).intValue();
    				int Zuoyequanzhong = Integer.valueOf(Zuoyeanniu).intValue();
    				int Ceshiquanzhong = Integer.valueOf(Ceshianniu).intValue();
    				int Kaoshiquanzhong = Integer.valueOf(Kaoshianniu).intValue();
    				int intNum = Integer.parseInt(Numanniu);//将Num类型由string转为int
    				
    				if(intNum == 1) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files11);
							fr2 = new FileReader(files12);
							fr3 = new FileReader(files13);
							fr4 = new FileReader(files14);
							fr5 = new FileReader(files15);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							System.out.print(Zongfenfenshu);
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 2) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files21);
							fr2 = new FileReader(files22);
							fr3 = new FileReader(files23);
							fr4 = new FileReader(files24);
							fr5 = new FileReader(files25);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 3) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files31);
							fr2 = new FileReader(files32);
							fr3 = new FileReader(files33);
							fr4 = new FileReader(files34);
							fr5 = new FileReader(files35);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 4) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files41);
							fr2 = new FileReader(files42);
							fr3 = new FileReader(files43);
							fr4 = new FileReader(files44);
							fr5 = new FileReader(files45);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 5) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files51);
							fr2 = new FileReader(files52);
							fr3 = new FileReader(files53);
							fr4 = new FileReader(files54);
							fr5 = new FileReader(files55);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 6) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files61);
							fr2 = new FileReader(files62);
							fr3 = new FileReader(files63);
							fr4 = new FileReader(files64);
							fr5 = new FileReader(files65);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 7) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files71);
							fr2 = new FileReader(files72);
							fr3 = new FileReader(files73);
							fr4 = new FileReader(files74);
							fr5 = new FileReader(files75);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 8) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files81);
							fr2 = new FileReader(files82);
							fr3 = new FileReader(files83);
							fr4 = new FileReader(files84);
							fr5 = new FileReader(files85);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 9) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files91);
							fr2 = new FileReader(files92);
							fr3 = new FileReader(files93);
							fr4 = new FileReader(files94);
							fr5 = new FileReader(files95);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 10) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files101);
							fr2 = new FileReader(files102);
							fr3 = new FileReader(files103);
							fr4 = new FileReader(files104);
							fr5 = new FileReader(files105);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 11) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files111);
							fr2 = new FileReader(files112);
							fr3 = new FileReader(files113);
							fr4 = new FileReader(files114);
							fr5 = new FileReader(files115);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 12) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files121);
							fr2 = new FileReader(files122);
							fr3 = new FileReader(files123);
							fr4 = new FileReader(files124);
							fr5 = new FileReader(files125);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 13) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files131);
							fr2 = new FileReader(files132);
							fr3 = new FileReader(files133);
							fr4 = new FileReader(files134);
							fr5 = new FileReader(files135);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 14) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files141);
							fr2 = new FileReader(files142);
							fr3 = new FileReader(files143);
							fr4 = new FileReader(files144);
							fr5 = new FileReader(files145);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 15) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files151);
							fr2 = new FileReader(files152);
							fr3 = new FileReader(files153);
							fr4 = new FileReader(files154);
							fr5 = new FileReader(files155);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 16) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files161);
							fr2 = new FileReader(files162);
							fr3 = new FileReader(files163);
							fr4 = new FileReader(files164);
							fr5 = new FileReader(files165);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 17) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files171);
							fr2 = new FileReader(files172);
							fr3 = new FileReader(files173);
							fr4 = new FileReader(files174);
							fr5 = new FileReader(files175);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 18) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files181);
							fr2 = new FileReader(files182);
							fr3 = new FileReader(files183);
							fr4 = new FileReader(files184);
							fr5 = new FileReader(files185);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 19) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files191);
							fr2 = new FileReader(files192);
							fr3 = new FileReader(files193);
							fr4 = new FileReader(files194);
							fr5 = new FileReader(files195);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 20) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files201);
							fr2 = new FileReader(files202);
							fr3 = new FileReader(files203);
							fr4 = new FileReader(files204);
							fr5 = new FileReader(files205);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 21) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files211);
							fr2 = new FileReader(files212);
							fr3 = new FileReader(files213);
							fr4 = new FileReader(files214);
							fr5 = new FileReader(files215);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 22) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files221);
							fr2 = new FileReader(files222);
							fr3 = new FileReader(files223);
							fr4 = new FileReader(files224);
							fr5 = new FileReader(files225);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 23) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files231);
							fr2 = new FileReader(files232);
							fr3 = new FileReader(files233);
							fr4 = new FileReader(files234);
							fr5 = new FileReader(files235);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 24) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files241);
							fr2 = new FileReader(files242);
							fr3 = new FileReader(files243);
							fr4 = new FileReader(files244);
							fr5 = new FileReader(files245);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 25) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files251);
							fr2 = new FileReader(files252);
							fr3 = new FileReader(files253);
							fr4 = new FileReader(files254);
							fr5 = new FileReader(files255);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 26) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files261);
							fr2 = new FileReader(files262);
							fr3 = new FileReader(files263);
							fr4 = new FileReader(files264);
							fr5 = new FileReader(files265);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 27) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files271);
							fr2 = new FileReader(files272);
							fr3 = new FileReader(files273);
							fr4 = new FileReader(files274);
							fr5 = new FileReader(files275);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 28) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files281);
							fr2 = new FileReader(files282);
							fr3 = new FileReader(files283);
							fr4 = new FileReader(files284);
							fr5 = new FileReader(files285);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 29) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files291);
							fr2 = new FileReader(files292);
							fr3 = new FileReader(files293);
							fr4 = new FileReader(files294);
							fr5 = new FileReader(files295);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) {
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
    				if(intNum == 30) {
    					FileReader fr1;
    					FileReader fr2;
    					FileReader fr3;
    					FileReader fr4;
    					FileReader fr5;
    					try {
							fr1 = new FileReader(files301);
							fr2 = new FileReader(files302);
							fr3 = new FileReader(files303);
							fr4 = new FileReader(files304);
							fr5 = new FileReader(files305);
							char[] data1 = new char[99];			//定义char数组
							int length1 = 0;
							String str1 = null;
							while((length1 = fr1.read(data1))>0){			//循环读取文件中的数据
								String str = new String(data1,0,length1);//根据读取的内容创建String对象
								str1 = str;
							}
							String[] Fengestr1 = str1.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num1 = new int[Fengestr1.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr1.length; i++)
							{
							num1[i] = Integer.valueOf(Fengestr1[i]).intValue();
							}
							int Num1 = 0;
							for (int i = 0; i < num1.length; i++)
							{
								Num1 = num1[i]+Num1;
							}
							
							char[] data2 = new char[99];			//定义char数组
							int length2 = 0;
							String str2 = null;
							while((length2 = fr2.read(data2))>0){			//循环读取文件中的数据
								String str = new String(data2,0,length2);//根据读取的内容创建String对象
								str2 = str;
							}
							String[] Fengestr2 = str2.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num2 = new int[Fengestr2.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr2.length; i++)
							{
							num2[i] = Integer.valueOf(Fengestr2[i]).intValue();
							}
							int Num2 = 0;
							for (int i = 0; i < num2.length; i++)
							{
								Num2 = num2[i]+Num2;
							}
							
							char[] data3 = new char[99];			//定义char数组
							int length3 = 0;
							String str3 = null;
							while((length3 = fr3.read(data3))>0){			//循环读取文件中的数据
								String str = new String(data3,0,length3);//根据读取的内容创建String对象
								str3 = str;
							}
							String[] Fengestr3 = str3.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num3 = new int[Fengestr3.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr3.length; i++)
							{
							num3[i] = Integer.valueOf(Fengestr3[i]).intValue();
							}
							int Num3 = 0;
							for (int i = 0; i < num3.length; i++)
							{
								Num3 = num3[i]+Num3;
							}
							
							char[] data4 = new char[99];			//定义char数组
							int length4 = 0;
							String str4 = null;
							while((length4 = fr4.read(data4))>0){			//循环读取文件中的数据
								String str = new String(data4,0,length4);//根据读取的内容创建String对象
								str4 = str;
							}
							String[] Fengestr4 = str4.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num4 = new int[Fengestr4.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr4.length; i++)
							{
							num4[i] = Integer.valueOf(Fengestr4[i]).intValue();
							}
							int Num4 = 0;
							for (int i = 0; i < num4.length; i++)
							{
								Num4 = num4[i]+Num4;
							}
							
							char[] data5 = new char[99];			//定义char数组
							int length5 = 0;
							String str5 = null;
							while((length5 = fr5.read(data5))>0){			//循环读取文件中的数据
								String str = new String(data5,0,length5);//根据读取的内容创建String对象
								str5 = str;
							}
							String[] Fengestr5 = str5.split(";");//使用split根据；将字符串拆分成字符串数组
							int[] num5 = new int[Fengestr5.length];//定义整型数组用来接收转换的字符串数组
							//将字符串数组转换成整型数组
							for (int i = 0; i < Fengestr5.length; i++)
							{
							num5[i] = Integer.valueOf(Fengestr5[i]).intValue();
							}
							int Num5 = 0;
							for (int i = 0; i < num5.length; i++)
							{
								Num5 = num5[i]+Num5;
							}
							fr1.close();//关闭流
							fr2.close();//关闭流
							fr3.close();//关闭流
							fr4.close();//关闭流
							fr5.close();//关闭流
							
							Dianmingfenshu = Num1 * Dianmingquanzhong * 0.01;
							Ketangfenshu = Num2 * Ketangquanzhong * 0.01;
							Zuoyefenshu = Num3 * Zuoyequanzhong * 0.01;
							Ceshifenshu = Num4 * Ceshiquanzhong * 0.01;
							Kaoshifenshu = Num5 * Kaoshiquanzhong * 0.01;
							Zongfenfenshu = Dianmingfenshu+Ketangfenshu+Zuoyefenshu
									+Ceshifenshu+Kaoshifenshu;
							Dianming.setText("点名："+Dianmingfenshu);
							Ketang.setText("课堂："+Ketangfenshu);
							Zuoye.setText("作业："+Zuoyefenshu);
							Ceshi.setText("测试："+Ceshifenshu);
							Kaoshi.setText("考试："+Kaoshifenshu);
							Zongfen.setText("总分："+Zongfenfenshu);
						} catch (IOException e1) { 
							// TODO 自动生成的 catch 块
							JOptionPane.showMessageDialog(null, 
									"计算权重错误（请确保每个编号都有对应的五个分数）", "错误",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
    				}
      			}
      		});
      	
      	// 创建container
 		Container container = this.getContentPane();
 		container.add(NumLable);
 		container.add(NumTextField);
 		container.add(SexLable);
 		container.add(SexLable1);
 		container.add(ComboBoxlist1);
 		container.add(SexLable2);
 		container.add(ComboBoxlist2);
 		container.add(SexLable3);
 		container.add(ComboBoxlist3);
 		container.add(SexLable4);
 		container.add(ComboBoxlist4);
 		container.add(SexLable5);
 		container.add(ComboBoxlist5);
 		container.add(AddBtn);
 		container.add(Dianming);
 		container.add(Ketang);
 		container.add(Zuoye);
 		container.add(Ceshi);
 		container.add(Kaoshi);
 		container.add(Zongfen);
    }
    @SuppressWarnings("unused")
	public static void main(String[] args) {
    	// TODO 自动生成的构造函数存根
          Guanli frame=new Guanli();
    }
}
废物程序到此完结（全名是“学生后台管理系统🤭🤭🤭”）
